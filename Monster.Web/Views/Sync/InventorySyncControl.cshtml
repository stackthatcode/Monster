@using Monster.Middle.Processes.Sync.Model.Status
@using Monster.Web.Plumbing

@Html.Partial("_PagingWidget")
@Html.Partial("_TopBrand")

<style>
    .sync-grid td {
        vertical-align: middle;
        font-size: 0.84em;
        background-color: #FFFFFF;
    }
</style>

<div class="large-size">
    <div data-bind="ifnot: JobRunningModel.AreAnyJobsRunning">
        <div data-bind="if: ShowWelcomePanel">
            <div data-bind="template: { name: 'Inventory-Welcome-Panel' }"></div>
        </div>

        <div data-bind="if: ShowSearchPanel">
            <div data-bind="template: { name: 'Inventory-Search-Panel' }"></div>
        </div>
    </div>

    <div data-bind="if: JobRunningModel.AreAnyJobsRunning">
        <div class="card center std-pad-sm">
            <div class="card-title-interface">Inventory Sync Control</div>
            <div class="card-body std-pad-b">
                <div data-bind="template: { name: 'Job-Running-Panel', data: JobRunningModel }"></div>
            </div>
        </div>
    </div>
</div>

<script id="Inventory-Welcome-Panel" type="text/html">
    <div class="medium-size">
        <hr />
        <h1 class="mt-4 center">Inventory Sync Control</h1>
        <p class="lead center">Pull from Shopify and Acumatica to prepare for loading</p>

        <div class="card">
            <div class="card-body std-pad">
                <div data-bind="template: { name: 'Inventory-Not-Pulled-Message' }"></div>
            </div>
        </div>
    </div>
</script>

<script id="Inventory-Search-Panel" type="text/html">
    <div class="large-size">
        <div class="card std-pad-sm">
            <div class="card-title-interface">Inventory Sync Control</div>
            
            <div class="center" style="padding-top:10px;"
                 data-bind="template: { name: 'Inventory-Refresh-Control', data: InventoryRefreshControlModel }"></div>

            <!-- Results -->
            <div class="std-pad-sm-side">
                <div data-bind="template: { name: 'Inventory-Sync-Grid', data: InventorySyncGrid }"></div>
            </div>
        </div>
    </div>
</script>

<script id="Inventory-Sync-Grid" type="text/html">
    <div class="card-body no-pad-sides">
        <!-- Filtering -->
        <div class="row">
            <div class="col-sm-8">
                <div class="input-group mb-3">
                    <input type="text" class="form-control"
                           data-bind="value: FilterText, event: { keyup: SearchTermsKeyCallback }"
                           placeholder="Enter Product Title, Variant Title, Item Id, Description, Vendor, Product Type"
                           aria-label="Enter Product Title, Variant Title, Item Id, Description, Vendor, Product Type"
                           maxlength="50" />

                    <div class="input-group-append">
                        <button class="btn btn-secondary" data-bind="click: FilterInventoryClick" type="button">
                            Filter Inventory <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-sm-4" style="text-align:right;">
                <div data-bind="template: { name: 'Monster-Paging-Widget', data: PagingWidget }"></div>
            </div>
        </div>

        <div class="center" style="font-size:0.8em;">
            <div class="form-check form-check-inline">
                <input class="form-check-input"
                       type="radio"
                       name="filterOptions"
                       id="inlineRadio1"
                       value="@SyncEnabledFilter.ShowAll"
                       data-bind="checked: FilterEnabled">
                <label class="form-check-label" for="inlineRadio1">Show All</label>
            </div>

            <div class="form-check form-check-inline">
                <input class="form-check-input"
                       type="radio"
                       name="filterOptions"
                       id="inlineRadio2"
                       value="@SyncEnabledFilter.EnabledOnly"
                       data-bind="checked: FilterEnabled">
                <label class="form-check-label" for="inlineRadio2">Enabled Only</label>
            </div>

            <div class="form-check form-check-inline">
                <input class="form-check-input"
                       type="radio"
                       name="filterOptions"
                       id="inlineRadio3"
                       value="@SyncEnabledFilter.DisabledOnly"
                       data-bind="checked: FilterEnabled">
                <label class="form-check-label" for="inlineRadio3">Disabled Only</label>
            </div>
        </div>

        <hr />

        <div>
            <div class="btn-group" style="float:right;" role="group" aria-label="Basic example">
                <button type="button" data-bind="click: SelectAll" class="btn btn-sm btn-secondary">
                    Select All <i class="fas fa-check-square"></i>
                </button>
                <button type="button" data-bind="click: UnselectAll" class="btn btn-sm btn-secondary">
                    Unselect All <i class="fas fa-minus-square"></i>
                </button>
            </div>
            <div role="group" aria-label="Basic example">
                <button type="button" data-bind="click: EnableSelected" class="btn btn-sm btn-primary">
                    Enable Selected <i class="fas fa-toggle-on"></i>
                </button>
                <button type="button" data-bind="click: DisableSelected" class="btn btn-sm btn-primary">
                    Disable Selected <i class="fas fa-toggle-off"></i>
                </button>
            </div>
        </div>

        <div style="clear:both; height:15px;"></div>

        <!-- Grid -->
        <div data-bind="visible: !HasData()" style="min-height:600px;  display:none; padding-top:200px;" class="empty-grid">
            <h1>No Products meet your criteria</h1>
            <p class="lead center">Only Shopify Product-Variants matched with Acumatica Stock Items will appear</p>
        </div>

        <div data-bind="visible: HasData()" style="min-height:600px;" class="grid-bg">
            <table class="table sync-grid">
                <tbody data-bind="foreach: GridData">
                    <tr>
                        <td style="padding-left:0;">
                            <!-- Rounded switch -->
                            <div style="text-align:center; margin-right:auto; margin-left:0; width:60px;">
                                <label class="switch">
                                    <input type="checkbox"
                                           data-bind="checked: IsEnabled, click: EnableClick">
                                    <span class="slider round"></span>
                                </label>

                                <div data-bind="if: IsEnabled">
                                    <span style="font-size:0.8em; font-weight:700; color:#007bff">ENABLED</span>
                                </div>
                                <div data-bind="ifnot: IsEnabled">
                                    <span style="font-size:0.8em; font-weight:700; color:#a9a9a9">DISABLED</span>
                                </div>
                            </div>
                        </td>
                        <td style="width:40%;">
                            <div class="ellipsis-overflow" style="max-width:300px;">
                                <span data-bind="text: ShopifySku"></span> <span>-</span>
                                <span data-bind="text: ShopifyVariantTitle"></span>
                            </div>
                            <div class="ellipsis-overflow" style="max-width:300px;">
                                <span data-bind="text: ShopifyProductTitle"></span>
                            </div>

                            <div>
                                <a href="#" target="_blank"
                                   data-bind="attr: { href: ShopifyVariantUrl }">(Click here to view in Shopify)</a>
                            </div>
                        </td>

                        <td style="width:40%;">
                            <div><span data-bind="text: AcumaticaItemId"></span></div>
                            <div class="ellipsis-overflow" style="max-width:300px;"><span data-bind="text: AcumaticaDescription"></span></div>
                            <div>
                                <a href="#" target="_blank"
                                   data-bind="attr: { href: AcumaticaStockItemUrl }">(Click here to view in Acumatica)</a>
                            </div>
                        </td>

                        <td style="text-align:right; padding-right:0; font-size:14px;">
                            <div data-bind="if: IsSelected">
                                <a href="#" data-bind="click: SelectClick"
                                   class="badge badge-primary" style="padding:10px; width:80px;">SELECTED</a>
                            </div>
                            <div data-bind="ifnot: IsSelected">
                                <a href="#" data-bind="click: SelectClick"
                                   class="badge badge-secondary" style="padding:10px; width:80px;">UNSELECTED</a>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</script>


<script>
    var Monster = Monster || {};

    Monster.InventoryConfigModel = function () {
        var self = this;

        self.JobRunningModel = new Monster.JobStatusModel();

        self.InventorySyncGrid = new Monster.InventorySyncGrid();
        self.InventoryRefreshControlModel = new Monster.InventoryRefreshControlModel();

        // Interface logic reduction
        //
        self.ShowWelcomePanel = ko.computed(function() {
            return !self.InventoryRefreshControlModel.HasRun();
        });

        self.ShowSearchPanel = ko.computed(function () {
            return self.InventoryRefreshControlModel.HasRun();
        });


        // Methods/Actions
        //
        self.ProcessStatus = function () {
            flow.exec(function() {
                    self.InventoryRefreshControlModel.RefreshStatus(this);
                },
                function() {
                    self.InventorySyncGrid.RefreshGrid();
                });
        };

        Monster.Events.subscribe(Monster.JobStatusRunningComplete, self.ProcessStatus);

        self.Initialize = function () {
            self.JobRunningModel.StartPolling(true);
        };

        return self;
    };

    SyncEnabledFilter = {
        ShowAll: '@SyncEnabledFilter.ShowAll',
        EnabledOnly: '@SyncEnabledFilter.EnabledOnly',
        DisabledOnly: '@SyncEnabledFilter.DisabledOnly',
    };

    Monster.InventorySyncGrid = function() {
        var self = this;

        self.FilterText = ko.observable("");
        self.FilterEnabled = ko.observable(SyncEnabledFilter.ShowAll);
        self.FilterEnabled.subscribe(function() {
            self.RefreshGrid();
        });

        self.GridData = ko.observableArray([]);

        self.HasData = ko.computed(function() {
            return self.GridData().length > 0;
        });

        self.SearchTermsKeyCallback = function (model, event) {
            if (event.keyCode == 13) {
                self.RefreshGrid();
                return false;
            } else {
                return true;
            }
        };

        self.PagingWidget = new MonsterWidgets.PagingWidget();

        self.PagingWidget.Callback = function () {
            self.RefreshGrid();
        };

        self.FilterInventoryClick = function() {
            self.RefreshGrid();
        };

        self.RefreshGrid = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    var model = {
                        filterText: self.FilterText(),
                        syncEnabledFilter: self.FilterEnabled(),
                        pageNumber: self.PagingWidget.PageNumber(),
                        pageSize: self.PagingWidget.PageSize(),
                    };
                    ajax.HttpPost("/Sync/VariantAndStockItemMatches", model, this);
                },
                function (response) {
                    //console.log(response);
                    self.DecorateGridData(response.results);

                    self.PagingWidget.RecordCount(response.count);
                    self.GridData(response.results);
                });
        };

        self.UpdateEnabledState = function(item) {
            //console.log(item.ShopifyVariantId, item.IsEnabled());

            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    var model = {
                        monsterVariantId: item.MonsterVariantId,
                        syncEnabled: item.IsEnabled(),
                    };
                    ajax.HttpPost("/Sync/SyncEnabled", model,this);
                },
                function (response) {
                    // TODO - force update of grid data
                });
        };

        self.SelectAll = function() {
            AQ(self.GridData()).each(function(x) { x.IsSelected(true); });
        };

        self.UnselectAll = function() {
            AQ(self.GridData()).each(function(x) { x.IsSelected(false); });
        };

        self.SelectedVariantIds = ko.computed(function() {
            return AQ(self.GridData())
                .where(function (x) { return x.IsSelected(); })
                .select(function (x) { return x.MonsterVariantId; })
                .toArray();
        });

        self.EnableSelected = function() {
            self.BulkSyncEnable(true);
        };

        self.DisableSelected = function() {
            self.BulkSyncEnable(false);
        };

        self.BulkSyncEnable = function (syncEnabled) {
            if (self.SelectedVariantIds().length == 0) {
                return;
            }

            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    var model = {
                        monsterVariantIds: self.SelectedVariantIds(),
                        syncEnabled: syncEnabled,
                    };

                    ajax.HttpPost("/Sync/BulkSyncEnabled", model, this);
                },
                function(response) {
                    self.RefreshGrid();
                });
        };


        self.DecorateGridData = function(input) {
            AQ(input).each(function(row) {
                self.DecorateGridRow(row);
            });
        }

        self.DecorateGridRow = function(row) {
            row.IsSelected = ko.observable(false);
            row.IsEnabled = ko.observable(false);

            row.SelectClick = function() {
                row.IsSelected(!row.IsSelected());
            };

            row.EnableClick = function() {
                self.UpdateEnabledState(row);
                return true;
            };

            // Load from the data set
            row.IsEnabled(row.IsSyncEnabled);
        };

        return self;
    };

    $(document).ready(function() {
        var model = new Monster.InventoryConfigModel();
        model.Initialize();
        ko.applyBindings(model);
    });
</script>

