@using Monster.Web.Plumbing

<style>
    .container {
        width: auto;
        max-width: 860px;
        padding: 0 15px;
    }

    .sync-label {
        display: inline-block;
        font-weight: 500;
        color: #999999;
    }
    .sync-action-label {
        float:left;
        font-weight: 700;
        display: inline-block;
        color: #555555;
    }
    .sync-action-label-sub {
        float:left;
        font-weight: 400;
        display: inline-block;
        color: #555555;
    }
    .sync-button {
        width: 190px;
    }

    .popup-sync-label {
        display: inline-block;
        min-width: 300px;
        text-align: left;
    }

    .sync-link {
        display: inline-block;
        text-align: left;
        font-weight: 700;
    }

    .alert-danger-link {
        color:#A23c54 !important;
    }
    .panel-size {
        max-width: 600px; margin-left: auto; margin-right: auto;
    }
    table.sync-settings td {
        padding-left: 0px;
        padding-right: 0px;
    }
</style>

<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")

    <div class="card std-pad-sm-t">
        <div class="card-title-interface">End-to-End Synchronization</div>

        <div class="card-body center">
            <div data-bind="if: JobRunningModel.AreAnyJobsRunning">
                <div data-bind="template: { name: 'Running-State', data: JobRunningModel }"></div>
            </div>

            <div data-bind="ifnot: JobRunningModel.AreAnyJobsRunning">
                <div data-bind="template: { name: 'Non-Running-State', data: JobTriggerPanelModel }"></div>
            </div>
        </div>
    </div>

    <div data-bind="template: { name: 'Order-Order-Sync-Settings-Popup', data: OrderSyncSettingsPopupModel }"></div>
</main>

<script type="text/html" id="Running-State">
    <hr />

    <div style="text-align: center;" class="std-pad-sm">
        <div data-bind="template: { name: 'Job-Running-Panel' }"></div>
    </div>

    <div style="height: 15px;"></div>
</script>

<script type="text/html" id="Non-Running-State">
    <hr />

    <div data-bind="template: { name: 'End-To-End-Sync-Control-Panel' }"></div>

    <div style="height: 15px;"></div>

    <div data-bind="template: { name: 'Order-Sync-Settings', data: SyncSettingsModel }"></div>
</script>

<script type="text/html" id="End-To-End-Sync-Control-Panel">
    <div class="panel-size alert" 
         data-bind="css: { 'alert-info': CanStartEndToEnd(), 'alert-danger': !CanStartEndToEnd() }">
        <strong>
            <div data-bind="ifnot: IsConfigReady">
                <a href="@GlobalConfig.Url("/Config/Diagnostics")" class="alert-danger-link">
                    Configuration Settings Not Ready <i class="fa fa-times"></i>
                </a>
            </div>
            <div data-bind="if: IsConfigReady">
                Configuration Settings Ready <i class="fa fa-check"></i>
            </div>
            
            <div data-bind="ifnot: IsStartingOrderReady">
                <a href="#" class="alert-danger-link"
                   data-bind="click: function() { Monster.Events.publish(eventKeys.LaunchOrderSyncSettings); }">
                    Order Sync Settings Not Ready <i class="fa fa-times"></i>
                </a>
            </div>
            <div data-bind="if: IsStartingOrderReady">
                Order Sync Settings Not Ready <i class="fa fa-check"></i>
            </div>
        </strong>
    </div>

    <div style="height: 15px;"></div>
    <div class="panel-size">
        <div style="height:70px;">
            <div data-bind="ifnot: IsRecurringEndToEndActive">
                <div data-bind="if: CanStartEndToEnd">
                    <label class="sync-action-label">Recurring End-to-End Sync disabled</label>
                    <a href="#" data-bind="click: $root.StartEndToEndRecurring"
                       style="float:right;"
                       class="btn btn-primary sync-button">
                        Start Recurring <i class="fas fa-clock"></i>
                    </a>
                </div>
                <div data-bind="ifnot: CanStartEndToEnd">
                    <label class="sync-action-label">Recurring End-to-End Sync disabled</label>
                    <a href="#" style="float:right;"
                            class="btn btn-secondary sync-button" data-bind="click: function() { return false; }">
                        Start Recurring <i class="fas fa-clock"></i>
                    </a>
                </div>
            </div>

            <div data-bind="if: IsRecurringEndToEndActive">
                <a href="#" data-bind="click: $root.PauseEndToEndRecurring"
                   class="btn btn-primary sync-button"
                   style="float:right;">
                    Stop Recurring <i class="fas fa-clock"></i>
                </a>

                <div class="sync-action-label">Recurring End-to-End Sync enabled</div>
                <div style="clear:left;"></div>
                <div class="sync-action-label-sub">(will run every 4 hours)</div>

            </div>
        </div>

        <div style="height:60px;">
            <div data-bind="ifnot: CanStartEndToEnd">
                <label class="sync-action-label">Run End-to-End Sync immediately</label>

                <button type="button" 
                        class="btn btn-secondary sync-button" 
                        style="float:right;" 
                        disable="disabled">
                    Run End-to-End Now <i class="fas fa-bolt"></i>
                </button>
            </div>

            <div data-bind="if: CanStartEndToEnd">
                <label class="sync-action-label">Run End-to-End Sync immediately</label>

                <a href="#" data-bind="click: $root.RunEndToEndImmediately" 
                   style="float:right;" 
                   class="btn btn-primary sync-button">
                    Run End-to-End Sync <i class="fas fa-bolt"></i>
                </a>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Order-Sync-Settings">
    <table class="table sync-settings" style="max-width: 600px; margin-left: auto; margin-right: auto;">
        <tbody>
        <tr>
            <td>
                <div style="clear: both; vertical-align: middle;"
                     data-bind="template: { name: 'Sync-Enable-Item', data: SyncOrdersEnabled }">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div id="order-settings" style="float: left;">
                    <!-- Starting Order Number -->
                    <div style="clear: both; text-align: left;">
                        <span class="sync-label" style="min-width: 200px; text-align: left;">Beginning Mark Order</span>

                        <!-- Display Link if populated... -->
                        <span data-bind="if: ShopifyOrderHref">
                            <a class="sync-link" data-bind="attr: { href: ShopifyOrderHref }" target="_blank">
                                <span data-bind="text: StartingOrderName">
                                </span>
                            </a>
                        </span>

                        <!-- ... else show alternate text -->
                        <span data-bind="ifnot: ShopifyOrderHref">
                            <span class="bold-light" data-bind="text: StartingOrderName">
                            </span>
                        </span>
                    </div>

                    <div style="clear: both; text-align: left;">
                        <span class="sync-label" style="min-width: 200px; text-align: left;">Order Created At (UTC)</span>
                        <span class="bold-light" data-bind="text: StartOrderCreatedAtUtc">
                        </span>
                    </div>
                    <div style="clear: both; text-align: left;">
                        <span class="sync-label" style="min-width: 200px; text-align: left;">Max Parallel Syncs</span>
                        <span class="bold-light" data-bind="text: MaxParallelAcumaticaSyncs"></span>
                    </div>
                    <div style="clear: both; text-align: left;">
                        <span class="sync-label" style="min-width: 200px; text-align: left;">Max # Orders per Sync</span>
                        <span class="bold-light" data-bind="text: MaxNumberOfOrders"></span>
                    </div>
                </div>

                <div style="float: right; padding-top: 15px;">
                    <a href="#" class="btn btn-primary btn-sm"
                       data-bind="click: EditOrderSettingsClick"
                       style="padding: 8px;">
                        Settings <i class="fa fa-pencil-alt"></i>
                    </a>
                </div>

                <div style="clear: both;" data-bind="ifnot: IsStartingOrderSet">
                    <div style="height: 20px;"></div>
                    <div class="alert alert-secondary">
                        <strong>Beginning Mark Order must be set to start End-to-End</strong>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: middle;"
                data-bind="template: { name: 'Sync-Enable-Item', data: SyncInventoryEnabled }"></td>
        </tr>
        <tr>
            <td style="vertical-align: middle;"
                data-bind="template: { name: 'Sync-Enable-Item', data: SyncShipmentsEnabled }"></td>
        </tr>
        <tr>
            <td style="vertical-align: middle;"
                data-bind="template: { name: 'Sync-Enable-Item', data: SyncRefundsEnabled }"></td>
        </tr>
        </tbody>
    </table>
</script>

<script type="text/html" id="Sync-Enable-Item">
    <div class="sync-label" style="margin-top:10px; float:left;" data-bind="text: Label"></div>

    <!-- Rounded switch -->
    <div style="text-align:center; float:right; width:70px;">
        <label class="switch" style="margin-bottom: 0;">
            <input type="checkbox"
                   data-bind="checked: IsEnabled, click: Clicked">
            <span class="slider round"></span>
        </label>
        <div data-bind="if: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#007bff">ENABLED</span>
        </div>
        <div data-bind="ifnot: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#a9a9a9">DISABLED</span>
        </div>
    </div>
</script>

<script id="Order-Order-Sync-Settings-Popup" type="text/html">
    <div class="modal fade" id="order-sync-settings-modal" tabindex="-1"
         role="dialog" aria-labelledby="order-sync-settings-modal" aria-hidden="true">

        <div class="modal-dialog" role="document" style="max-width:600px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="order-sync-settings-modalLabel">Enter Order Sync Settings</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body left">
                    <div data-bind="if: IsStartingOrderValid">
                        <div class="form-group" style="clear: both; text-align: left;">
                            <span class="popup-sync-label">Current Beginning Mark Order</span>
                            <a class="sync-link" data-bind="attr: { href: ShopifyOrderHref }" target="_blank">
                                <span data-bind="text: ShopifyOrderName"></span>
                            </a>
                            <div style="clear:both;"></div>
                            <span class="popup-sync-label">Order Created At (UTC)</span>
                            <span class="sync-setting" data-bind="text: ShopifyOrderCreatedAtUtc">
                            </span>
                        </div>
                        <hr />
                        <div style="height:10px;"></div>
                    </div>

                    <div data-bind="ifnot: IsStartingOrderValid">
                        <div style="height:91px;">
                            <div class="alert alert-secondary">
                                <strong>Beginning Mark Order must be set to start End-to-End</strong>
                            </div>
                        </div>
                    </div>

                    <div data-bind="ifnot: IsStartingOrderSet">
                        <div class="form-group">
                            <label for="orderNumber">Enter Beginning Mark Shopify Order Number or ID </label>

                            <div class="input-group">
                                <input id="orderNumber"
                                       class="form-control"
                                       placeholder="Enter a Shopify Order Number or ID..."
                                       maxlength="20"
                                       data-bind="value: NewStartingOrderNumber,
                                            event: { keyup: InvokeKeyCallback }" />

                                <div class="input-group-append">
                                    <button data-bind="click: VerifyShopifyOrder"
                                            class="btn btn-primary" type="button">
                                        Verify <i class="fas fa-bolt"></i>
                                    </button>
                                </div>
                            </div>

                            <small id="orderNumberHelp" class="form-text text-muted">
                                @GlobalConfig.AppName will only load Shopify Orders that are created
                                <strong>after</strong> the Beginning Mark Order.
                            </small>

                            <div class="error-message">
                                WARNING - this can only be saved once. After saving, you'll need to
                                contact tech support to change your Beginning Mark Order.
                            </div>
                            <hr />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="orderNumber">
                            Maximum # of Parallel Syncs to Acumatica
                        </label>
                        <select class="form-control" data-bind="value: MaxParallelSyncs">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                        </select>

                        <small id="orderNumberHelp" class="form-text text-muted">
                            @GlobalConfig.AppName will run up to this many syncs to Acumatica at the same time.
                            <div style="font-weight:700;">WARNING - be sure confirm that you have sufficient Acumatica licenses </div>
                        </small>
                        <hr />
                    </div>

                    <div class="form-group">
                        <label for="orderNumber">
                            Maximum # of new Shopify Orders to load
                        </label>
                        
                        <input class="form-control" type="text" maxlength="6"
                               data-bind="numeric, value: MaxNumberOfOrders" />

                        <small id="orderNumberHelp" class="form-text text-muted">
                            Leaving this field blank will use the system default of 5,000
                        </small>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Cancel <i class="fas fa-times"></i>
                    </button>
                    <button type="button" data-bind="click: SaveSettings" class="btn btn-primary">
                        Save <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</script>


<script>
    var Monster = Monster || {};

    var eventKeys = {
        UpdateSyncEnables: "/UpdateSyncEnables",
        LaunchOrderSyncSettings: "/LaunchOrderSyncSettings",
        RefreshSyncSettings: "/RefreshSyncSettings",
        PollJobStatus: "/PollJobStatus",
    };

    Monster.OrderSyncSettingsPopupModel = function () {
        var self = this;

        // Existing Starting Order
        //
        self.IsStartingOrderSet = ko.observable();
        self.ShopifyOrderId = ko.observable();
        self.ShopifyOrderName = ko.observable();
        self.ShopifyOrderHref = ko.observable();
        self.ShopifyOrderCreatedAtUtc = ko.observable();

        // Validity state
        //
        self.IsStartingOrderValid = ko.observable(false);

        // Data entry fields
        //
        self.NewStartingOrderNumber = ko.observable();
        self.MaxParallelSyncs = ko.observable();
        self.MaxNumberOfOrders = ko.observable();
        

        self.ShowValidation = ko.observable(false);

        self.InvokeKeyCallback = function (model, event) {
            if (event.keyCode == 13) {
                self.VerifyShopifyOrder();
                return false;
            } else {
                return true;
            }
        };

        self.VerifyShopifyOrder = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    var data = { orderNameOrId: self.NewStartingOrderNumber() };
                    ajax.HttpPost("/Sync/VerifyShopifyOrder", data, this);
                },
                function (response) {
                    self.ShopifyOrderId(response.ShopifyOrderId);
                    self.ShopifyOrderName(response.ShopifyOrderName);
                    self.ShopifyOrderHref(response.ShopifyOrderHref);
                    self.ShopifyOrderCreatedAtUtc(response.ShopifyOrderCreatedAtUtc);

                    self.IsStartingOrderValid(response.ShopifyOrderId && true);
                });
        };

        self.SaveSettings = function () {
            self.ShowValidation(true);

            var maxNumberOfOrders = $.isNumeric(self.MaxNumberOfOrders()) ? self.MaxNumberOfOrders() : 5000;
            if (!maxNumberOfOrders) {
                maxNumberOfOrders = 5000;
            }

            self.MaxNumberOfOrders(maxNumberOfOrders);

            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    var data = {
                        ShopifyOrderId: self.ShopifyOrderId(),
                        ShopifyOrderName: self.ShopifyOrderName(),
                        ShopifyOrderCreatedAtUtc: self.ShopifyOrderCreatedAtUtc(),
                        MaxParallelAcumaticaSyncs: self.MaxParallelSyncs(),
                        MaxNumberOfOrders: self.MaxNumberOfOrders(),
                    };

                    ajax.HttpPost("/Sync/OrderSyncSettingsUpdate", data, this);
                },
                function (response) {
                    self.Close();
                    Monster.Events.publish(Monster.JobStatusRunningComplete);
                });
        };

        self.Close = function () {
            $("#order-sync-settings-modal").modal('hide');
        }
        
        self.LaunchEditOrderSyncSettings = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("/Sync/SyncSettingsAndEnables", this);
                },
                function (settings) {
                    self.IsStartingOrderSet(settings.IsStartingOrderSet);
                    self.IsStartingOrderValid(settings.IsStartingOrderSet);

                    self.ShopifyOrderId(settings.StartingOrderId);
                    self.ShopifyOrderName(settings.StartingOrderName);
                    self.ShopifyOrderHref(settings.StartingOrderHref);
                    self.ShopifyOrderCreatedAtUtc(settings.StartOrderCreatedAtUtc);

                    self.MaxNumberOfOrders(settings.MaxNumberOfOrders);
                    self.MaxParallelSyncs(settings.MaxParallelAcumaticaSyncs);
                    self.NewStartingOrderNumber("");


                    $("#order-sync-settings-modal").modal('show');
                });
        };

        Monster.Events.subscribe("/LaunchOrderSyncSettings", self.LaunchEditOrderSyncSettings);
        return self;
    };

    Monster.SyncEnabledModel = function (label, event) {
        var self = this;

        self.IsEnabled = ko.observable(true);

        self.Clicked = function () {
            if (event) {
                Monster.Events.publish(event);
            }
            return true;
        };

        self.Set = function (enabled) {
            self.IsEnabled(enabled);
        }

        self.Label = ko.observable(label);

        return self;
    };

    Monster.SyncSettingsModel = function () {
        var self = this;

        // Sync Enable models
        //
        self.SyncInventoryEnabled
            = new Monster.SyncEnabledModel("Inventory Synchronization", eventKeys.UpdateSyncEnables);
        self.SyncOrdersEnabled
            = new Monster.SyncEnabledModel("Order Synchronization", eventKeys.UpdateSyncEnables);
        self.SyncShipmentsEnabled
            = new Monster.SyncEnabledModel("Shipment Synchronization", eventKeys.UpdateSyncEnables);
        self.SyncRefundsEnabled
            = new Monster.SyncEnabledModel("Return Synchronization", eventKeys.UpdateSyncEnables);

        // Order Sync Settings data
        //
        self.StartingOrderName = ko.observable();
        self.StartingOrderId = ko.observable();
        self.StartOrderCreatedAtUtc = ko.observable();
        self.ShopifyOrderHref = ko.observable();
        self.MaxParallelAcumaticaSyncs = ko.observable();
        self.MaxNumberOfOrders = ko.observable();
        self.IsStartingOrderSet = ko.observable();

        // Publishes an event to trigger launch of Order Sync Settings editor pop-up
        //
        self.EditOrderSettingsClick = function () {
            Monster.Events.publish(eventKeys.LaunchOrderSyncSettings);
        };

        self.RefreshSyncSettings = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("/Sync/SyncSettingsAndEnables", this);
                },
                function (model) {
                    // Sync Enables
                    //
                    self.SyncInventoryEnabled.Set(model.SyncInventoryEnabled);
                    self.SyncOrdersEnabled.Set(model.SyncOrdersEnabled);
                    self.SyncShipmentsEnabled.Set(model.SyncShipmentsEnabled);
                    self.SyncRefundsEnabled.Set(model.SyncRefundsEnabled);

                    // Order Sync Settings
                    //
                    self.StartingOrderId(model.StartingOrderId);
                    self.StartingOrderName(model.StartingOrderName);
                    self.StartOrderCreatedAtUtc(model.StartOrderCreatedAtUtc);
                    self.ShopifyOrderHref(model.StartingOrderHref);
                    self.MaxParallelAcumaticaSyncs(model.MaxParallelAcumaticaSyncs);
                    self.MaxNumberOfOrders(model.MaxNumberOfOrders);
                    self.IsStartingOrderSet(model.IsStartingOrderSet);
                });
        };

        // Writes the current state of Sync Enables to HTTP
        //
        self.UpdateSyncEnables = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    var model = {
                        SyncInventoryEnabled: self.SyncInventoryEnabled.IsEnabled(),
                        SyncOrdersEnabled: self.SyncOrdersEnabled.IsEnabled(),
                        SyncShipmentsEnabled: self.SyncShipmentsEnabled.IsEnabled(),
                        SyncRefundsEnabled: self.SyncRefundsEnabled.IsEnabled(),
                    };

                    ajax.HttpPost("/Sync/UpdateSyncEnables", model, this);
                },
                function () {
                    Monster.Events.publish(eventKeys.RefreshSyncSettings);
                });
        };

        Monster.Events.subscribe(eventKeys.RefreshSyncSettings, self.RefreshSyncSettings);
        Monster.Events.subscribe(eventKeys.UpdateSyncEnables, self.UpdateSyncEnables);

        return self;
    };

    Monster.JobTriggerPanelModel = function () {
        var self = this;

        // End-to-End Sync readiness
        //
        self.IsConfigReady = ko.observable(false);
        self.IsStartingOrderReady = ko.observable(false);
        self.CanStartEndToEnd = ko.observable(false);
        self.IsRecurringEndToEndActive = ko.observable(false);

        // Sync Settings data entry models
        //
        self.SyncSettingsModel = new Monster.SyncSettingsModel();

        // Model loading function
        //
        self.Populate = function (model) {
            self.IsConfigReady(model.IsConfigReady);
            self.IsStartingOrderReady(model.IsStartingOrderReady);
            self.CanStartEndToEnd(model.CanStartEndToEnd);
            self.IsRecurringEndToEndActive(model.IsRecurringEndToEndActive);
        };

        return self;
    }

    Monster.ParentInterface = function () {
        var self = this;

        // Current Job status
        //
        self.JobRunningModel = new Monster.JobStatusModel();

        self.PauseEndToEndRecurring = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("/Sync/PauseEndToEndRecurring", {}, this);
                },
                function (response) {
                    self.ProcessStatus();
                });
        };

        // Interactivity to trigger the End-to-End-Sync
        //
        self.StartEndToEndRecurring = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("/Sync/StartEndToEndRecurring", {}, this);
                },
                function (response) {
                    Monster.Events.publish(Monster.JobStatusStartPolling);
                });
        };

        self.RunEndToEndImmediately = function() {
            alert('ok!!!');
        }


        // Child Models divide by state
        //
        self.JobTriggerPanelModel = new Monster.JobTriggerPanelModel();
        self.OrderSyncSettingsPopupModel = new Monster.OrderSyncSettingsPopupModel();

        self.ProcessStatus = function () {
            flow.exec(function () {
                var ajax = new Monster.Ajax();
                ajax.HttpGet("/Sync/EndToEndStatus", this);
            },
                function (response) {
                    self.JobTriggerPanelModel.Populate(response);
                    Monster.Events.publish(eventKeys.RefreshSyncSettings);
                });
        };

        Monster.Events.subscribe(Monster.JobStatusRunningComplete, function () { self.ProcessStatus(); });

        self.Initialize = function () {
            self.JobRunningModel.StartPolling(true);
        };

        return self;
    };

    $(document).ready(function () {
        var model = new Monster.ParentInterface();
        ko.applyBindings(model);
        model.Initialize();
    });
</script>
