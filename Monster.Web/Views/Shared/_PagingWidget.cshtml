@using Monster.Web.Plumbing
<style>
    .monster-paging-widget .btn
    {
        font-size:0.9em;
    }
</style>

<script type="text/html" id="Monster-Paging-Widget">
    <div class="btn-group monster-paging-widget" role="group">
        <button type="button" class="btn btn-light" data-bind="click: First">
            <i class="fa fa-fast-backward"></i>
        </button>
        <button type="button" class="btn btn-light" data-bind="click: Previous">
            <i class="fa fa-step-backward"></i>
        </button>

        <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" 
                    data-toggle="dropdown" class="btn btn-light dropdown-toggle" 
                    aria-haspopup="true" aria-expanded="false">
                Page <span data-bind="text: PageNumber"></span> of 
                <span data-bind="text: PageCount"></span>
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                @if (GlobalConfig.DebugMode)
                {
                    <a class="dropdown-item" data-bind="click: function() { PageSize(2); }" href="#">2 per page</a>
                    <a class="dropdown-item" data-bind="click: function() { PageSize(5); }" href="#">5 per page</a>
                }

                <a class="dropdown-item" data-bind="click: function() { PageSize(100); }" href="#">100 per page</a>
                <a class="dropdown-item" data-bind="click: function() { PageSize(250); }" href="#">250 per page</a>
            </div>
        </div>

        <button type="button" class="btn btn-light" data-bind="click: Next">
            <i class="fa fa-fast-forward"></i>
        </button>
        <button type="button" class="btn btn-light" data-bind="click: Last">
            <i class="fa fa-step-forward"></i>
        </button>
    </div>
</script>

<script type="text/javascript">
    var MonsterWidgets = MonsterWidgets || {};

    MonsterWidgets.PagingWidget = function () {
        var self = this;

        self.RecordCount = ko.observable(0);
        self.PageNumber = ko.observable(1);
        self.PageSize = ko.observable(100);

        self.PageSizeChanged = function () {
            self.PageNumber(1);
            self.Callback();
        }

        self.PageSize.subscribe(function () {
            self.PageSizeChanged();
        });

        self.PageCount = ko.computed(function () {
            var computedPageCount =
                Math.floor((Math.floor(self.RecordCount()) + Math.floor(self.PageSize()) - 1) / self.PageSize());

            computedPageCount = computedPageCount || 1;

            //console.log("self.PageCount", self.RecordCount());

            return (computedPageCount);
        });

        self.StartingRecord = ko.computed(function() {
            return (self.PageNumber() - 1) * self.PageSize();
        });


        self.First = function () {
            self.PageNumber(1);
            self.Callback();
        };

        self.Previous = function () {
            if (self.PageNumber() > 1) {
                self.PageNumber(self.PageNumber() - 1);
                self.Callback();
            }
        };

        self.Next = function () {
            if (self.PageNumber() < self.PageCount()) {
                self.PageNumber(self.PageNumber() + 1);
                self.Callback();
            }
        };

        self.Last = function () {
            self.PageNumber(self.PageCount());
            self.Callback();
        };
        
        self.Callback = function() { };

        return self;
    };
</script>
