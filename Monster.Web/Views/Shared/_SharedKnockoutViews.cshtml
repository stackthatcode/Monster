@using Monster.Web.Plumbing

<!-- Job Running Status & Execution Log - View + Models -->
<script type="text/html" id="Job-Running-Spinner">
    <img style="width: 100px;" src="@GlobalConfig.Url("/Content/throbber_12.gif")" />

    <div style="height: 30px;"></div>

    <p class="center">
        There is currently a background job running
    </p>
</script>
<script type="text/html" id="Execution-Log-Ticker">
    <div style="font-size:0.9em; color:#555555; text-align:center; padding:15px; letter-spacing: 5px; text-transform: uppercase;">
        Execution Logs
    </div>

    <div data-bind="ifnot: HasLogs">
        <div style="height: 400px; padding-top:150px;" class="empty-grid">
            <h1>Execution logs are currently empty</h1>
        </div>
    </div>

    <div data-bind="if: HasLogs">
        <div style="overflow-y: scroll; height: 400px; text-align: left;">
            <div data-bind="template: { name: 'Execution-Log-Table', data: Logs }"></div>
        </div>
    </div>
</script>
<script id="Execution-Log-Table" type="text/html">
    <table class="table table-striped">
        <tbody data-bind="foreach: $data">
            <tr>
                <td>
                    <div style="font-size: 14px; letter-spacing: 1px; color: #777;">
                        <span data-bind="text: DateCreated"></span> (UTC)
                    </div>

                    <div data-bind="text: LogContent"></div>
                </td>
            </tr>
        </tbody>
    </table>
</script>
<script id="Job-Running-Panel" type="text/html">
    <div>
        <div data-bind="template: { name: 'Job-Running-Spinner' }"></div>
        <hr />
        <div data-bind="template: { name: 'Execution-Log-Ticker' }"></div>
    </div>
</script>
<script>
    var Monster = Monster || {};

    Monster.JobStatusRunningComplete = '/JobStatus/RunningComplete';
    Monster.JobStatusStartPolling = '/JobStatus/StartPolling';
    Monster.JobStatusIsRunning = '/JobStatus/IsRunning';

    Monster.JobStatusModel = function () {
        var self = this;

        self.IsPollingStarted = ko.observable(false);
        self.IsEndToEndSyncRunning = ko.observable(false);
        self.AreAnyJobsRunning = ko.observable(false);
        self.Logs = ko.observableArray([]);

        self.HasLogs = ko.computed(function () {
            return self.Logs().length > 0;
        });

        self.Poll = function () {
            flow.exec(function () {
                var ajax = new Monster.Ajax();
                ajax.DisablePopupsAndSpinners();
                ajax.HttpGet("/Job/Status", this);
            },
                function (response) {
                    var oldAreAnyJobsRunning = self.AreAnyJobsRunning();

                    self.IsEndToEndSyncRunning(response.IsEndToEndSyncRunning);
                    self.AreAnyJobsRunning(response.AreAnyJobsRunning);
                    self.Logs(response.Logs);
                    setTimeout(self.Poll, 1000);

                    if (oldAreAnyJobsRunning && !response.AreAnyJobsRunning) {
                        Monster.Events.publish(Monster.JobStatusRunningComplete);
                    }
                });
        };

        self.StartPolling = function (areAnyJobsRunning) {
            self.AreAnyJobsRunning(areAnyJobsRunning);

            if (!self.IsPollingStarted()) {
                self.Poll();
                self.IsPollingStarted(true);
            }
        };

        // Pub-Sub subscription
        //
        Monster.Events.subscribe(Monster.JobStatusStartPolling, function () { self.StartPolling(true); });

        return self;
    };
</script>

<!-- Inventory Refresh Control -->
<script id="Inventory-Refresh-Control" type="text/html">
    <div style="display:inline-block">
        <button type="button" class="btn btn-primary btn-sm" data-bind="click: RefreshInventoryClick">
            Refresh Inventory <i class="fas fa-bolt"></i>

            <span data-bind="if: LastRunBroken">
                <span class="badge badge-dark">FAILED</span>
            </span>
        </button>

        <span data-bind="if: LastRunBroken">
            <a href='@GlobalConfig.Url("/Config/Diagnostics")' class="btn btn-dark btn-sm">
                View Diagnostics <i class="fas fa-user-md"></i>
            </a>
        </span>
    </div>
</script>
<script>
    var Monster = Monster || {};

    Monster.StartInventoryRefresh = "/StartInventoryRefresh";

    Monster.InventoryRefreshControlModel = function () {
        var self = this;

        self.InventoryRefreshState = ko.observable(StateCode.None);

        self.HasRun = ko.computed(function () {
            return self.InventoryRefreshState() != StateCode.None;
        });

        self.LastRunBroken = ko.computed(function () {
            return self.InventoryRefreshState() == StateCode.Invalid ||
                self.InventoryRefreshState() == StateCode.SystemFault;
        });

        self.RefreshStatus = function (callback) {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("/Job/InventoryRefreshStatus", this);
                },
                function (response) {
                    self.InventoryRefreshState(response.InventoryRefreshState);
                    callback();
                });
        };

        self.RefreshInventoryClick = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("/Sync/RunInventoryRefresh", {}, this);
                },
                function () {
                    // We can override these defaults, later...
                    //
                    Monster.Events.publish(Monster.JobStatusIsRunning);
                });
        };

        return self;
    };
</script>

<!-- Shopify Product Detail pop-up -->
<script id="Shopify-Product-Detail" type="text/html">
    <style>
        .product-detail td {
            vertical-align: middle;
        }
    </style>

    <div class="modal fade" id="import-product-detail-modal" tabindex="-1" role="dialog"
         aria-labelledby="import-product-detail-label" aria-hidden="true">
        <div class="modal-dialog" role="document" style="max-width: 700px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="import-product-detail-label">Shopify Product Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" data-bind="with: Data">
                    <div class="mb-4">
                        <div class="modal-heavy-text"
                             data-bind="text: ProductTitle"></div>
                        <div data-bind="text: Vendor"></div>
                        <div class="text-muted">
                            Product Id: <span data-bind="text: ShopifyProductId"></span>
                        </div>
                        <div>
                            <a href="#" target="_blank" data-bind="attr: { href: ShopifyUrl }">
                                (Click here to view in Shopify)
                            </a>
                        </div>
                    </div>

                    <div class="mb-4">
                        <div>
                            <span data-bind="text: VariantCount"></span> Shopify Variants
                            / <span data-bind="text: SyncedVariantCount"></span> synced with Acumatica
                        </div>
                    </div>

                    <div class="mb-4">
                        <table class="table product-detail">
                            <tbody data-bind="foreach: Variants">
                                <tr>
                                    <td>
                                        <div class="modal-heavy-text">
                                            <span data-bind="text: Sku"></span>
                                            - <span data-bind="text: VariantTitle"></span>
                                        </div>
                                        <div class="text-muted">
                                            Variant Id: <span data-bind="text: ShopifyVariantId"></span>
                                        </div>
                                    </td>

                                    <td>
                                        <div><span data-bind="text: FormattedPrice"></span></div>
                                        <div><span data-bind="text: AvailableQuantity"></span> available</div>
                                    </td>

                                    <td style="text-align: right; min-width:100px;">
                                        <div data-bind="if: IsLoadedInAcumatica">
                                            <h3 class="badge badge-success">
                                                Synced In Acumatica
                                            </h3>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">
                        Done <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</script>
<script>
    Monster.LaunchShopifyProductDetail = "/LaunchShopifyProductDetail ";

    Monster.ShopifyProductDetail = function () {
        var self = this;

        self.Data = ko.observable();

        self.Launch = function (shopifyProductId) {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    var url = "/Sync/ProductDetail?shopifyProductId=" + shopifyProductId;
                    ajax.HttpGet(url, this);

                },
                function (response) {
                    //console.log(response);
                    self.Data(response);
                });

            $("#import-product-detail-modal").modal('show');
        };

        Monster.Events.subscribe(Monster.LaunchShopifyProductDetail, function (shopifyProductId) {
            self.Launch(shopifyProductId);
        });

        return self;
    }
</script>

<!-- Shopify Product Finder pop-up -->
<script id="Shopify-Product-Finder" type="text/html">
    <style>
        .shopify-product-finder-detail td {
            vertical-align: middle;
        }
    </style>

    <div class="modal fade" id="shopify-product-finder-modal" tabindex="-1" role="dialog" aria-labelledby="shopify-product-finder-label" aria-hidden="true">
        <div class="modal-dialog" role="document" style="max-width: 800px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="shopify-product-finder-label">Find and select a Shopify Product</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <!-- # of results -->
                <div class="modal-body">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" style="font-size:0.9em;" maxlength="50"
                               data-bind="value: FilterTerms, event: { keyup: SearchTermsKeyCallback }"
                               placeholder="Enter Product Title, Vendor, Product Type, Variant Title, SKU"
                               aria-label="Enter Product Title, Vendor, Product Type, Variant Title, SKU" />

                        <div class="input-group-append">
                            <button class="btn btn-secondary" type="button"
                                    style="font-size:0.9em;"
                                    data-bind="click: RefreshGrid">
                                Filter Inventory <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>

                    <div class="text-muted" style="font-weight: 600;" data-bind="if: MaxRecordsDisplayed">
                        (More than <span data-bind="text: RecordCount"></span> records returned from search)
                    </div>
                    <div class="text-muted" style="font-weight: 600;" data-bind="ifnot: MaxRecordsDisplayed">
                        (<span data-bind="text: RecordCount"></span> records returned from search)
                    </div>
                    <div style="padding-top:20px;"></div>
                    <table class="table" style="font-size:0.9em;">
                        <tbody data-bind="foreach: GridData">
                            <tr>
                                <td style="padding-left:0;">
                                    <div>
                                        <a data-bind="attr: { href: ShopifyUrl }, text: ProductTitle"></a>
                                    </div>
                                    <div data-bind="text: Vendor"></div>
                                </td>
                                <td>
                                    <div>
                                        <span data-bind="text: VariantCount"></span>
                                        Shopify Variants
                                    </div>
                                    <div>
                                        <span data-bind="text: SyncedVariantCount"></span>
                                        synced with Acumatica
                                    </div>
                                </td>
                                <td style="text-align:right;">
                                    <a href="#" class="btn btn-primary" style="font-size:0.9em;"
                                       data-bind="click: $parent.SelectProduct">
                                        Select <i class="fa fa-check"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Close <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</script>
<script>
    Monster.LaunchShopifyProductFinder = "/LaunchShopifyProductFinder";

    Monster.ShopifyProductFinder = function () {
        var self = this;

        self.GridData = ko.observableArray([]);
        self.FilterTerms = ko.observable("");

        self.SearchTermsKeyCallback = function (model, event) {
            if (event.keyCode == 13) {
                self.RefreshGrid();
                return false;
            } else {
                return true;
            }
        };
        
        self.MaxRecords = 100;

        self.RecordCount = ko.computed(function() { return self.GridData().length; });

        self.MaxRecordsDisplayed = ko.computed(function() {
            return self.RecordCount() == self.MaxRecords;
        });

        self.RefreshGrid = function () {
            flow.exec(function () {
                    var ajax = new Monster.Ajax();
                    var url = "/Sync/FilterShopifyProducts" +
                        "?terms=" + self.FilterTerms() +
                        "&maxRecords=" + self.MaxRecords;

                    ajax.HttpGet(url, this);
                },
                function (response) {
                    self.GridData(response.searchResult);
                });
            };

        self.Callback = function(product) {};
        
        self.Launch = function (callback) {
            self.FilterTerms("");
            self.Callback = callback;

            self.RefreshGrid();

            $("#shopify-product-finder-modal").modal('show');
        };

        self.SelectProduct = function (item) {
            $("#shopify-product-finder-modal").modal('hide');
            $('#shopify-product-finder-modal').unbind('hidden.bs.modal');
            $('#shopify-product-finder-modal').on('hidden.bs.modal',
                function(e) {
                    self.Callback(item);
                });
        };

        Monster.Events.subscribe(Monster.LaunchShopifyProductFinder, self.Launch);
        
        return self;
    }
</script>


<!-- Welcome Panel for the End-to-End Sync and Inventory Import screens -->
<script type="text/html" id="Inventory-Not-Pulled-Message">
    <div class="alert alert-warning">
        <strong>Important:</strong> Before transferring Products and Stock Items between Shopify and Acumatica,
        @GlobalConfig.AppName will need to download a copy of the inventory from both systems.
    </div>
    <div style="height:40px;"></div>

    <div class="center">
        <a href="#" class="btn btn-primary btn-lg"
           data-bind="click: function() { Monster.Events.publish(Monster.StartInventoryRefresh); }">
            Download Now <i class="fas fa-bolt"></i>
        </a>
    </div>
</script>
