@using Monster.Web.Plumbing

<style>
    .form-group label { font-weight: 700; }
    #preferences .form-group { height: 120px; }
</style>

<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")

    <hr />
    <h1 class="mt-4 center">Configuration - Settings</h1>
    <p class="lead center">
        Choose settings to control how @GlobalConfig.AppName synchronizes your data with Acumatica.
    </p>

    <div data-bind="template: { name: 'Settings-Editor' }"></div>
</main>


<script type="text/html" id="Settings-Editor">
    <div data-bind="if: ShowRefDataErrorMessage">
        <div class="std-pad">
            <div class="alert alert-danger">
                <strong>Acumatica Reference Data Pull - Broken</strong><br />
                There's something wrong with your Acumatica reference data.
            </div>
            <p>
                Your Acumatica reference data needs to be properly configured. You can address this now by
                <a href="@GlobalConfig.Url("/Config/AcumaticaRefData")"><strong>clicking here</strong></a>.
            </p>
        </div>
    </div>

    <div data-bind="if: ShowDataEntry">
        <div class="card text-center">
            <div id="preferences" class="card-body left">
                <!-- Time Zone -->
                <div class="form-group">
                    <label for="timeZone">Acumatica Instance Time Zone</label>

                    <select id="timeZone" class="form-control"
                            data-bind="value: SelectedTimeZone,
                                options: TimeZones,
                                optionsText: 'Name',
                                value: SelectedTimeZone,
                                optionsCaption: 'Choose...'"></select>

                    <small id="timeZoneHelp" class="form-text text-muted">
                        In order to synchronize properly, @GlobalConfig.AppName
                        needs to translate between time zones properly
                    </small>

                    <div class="error-message" data-bind="if: ShowValidation() && !TimeZoneValid()">
                        Please select the right Time Zone for your Acumatica Instance
                    </div>
                </div>

                <!-- Item Class -->
                <div class="form-group">
                    <label for="itemClass">Acumatica Default Item Class</label>

                    <select class="form-control"
                            id="itemClass"
                            data-bind="optionsCaption: 'Choose...',
                                value: SelectedItemClass,
                                options: ItemClasses,
                                optionsText: 'ItemClass'"></select>

                    <small id="itemClassHelp" class="form-text text-muted">
                        @GlobalConfig.AppName will use this selection
                        when it creates Stock Items from Shopify Products
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !ItemClassValid()">
                        Please select an Item Class with a valid Posting Class and Default Warehouse
                    </div>
                </div>

                <!-- Posting Class -->
                <div class="form-group">
                    <label for="postingClass">Acumatica Default Posting Class</label>

                    <div data-bind="ifnot: SelectedPostingClass">
                        <input type="text"
                               id="postingClass"
                               class="form-control"
                               disabled="disabled"
                               value="(Select an Item Class that has a Posting Class)" />
                    </div>

                    <div data-bind="if: SelectedPostingClass">
                        <input type="text"
                               id="postingClass"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: SelectedPostingClass" />
                    </div>

                    <small id="postingClassHelp" class="form-text text-muted">
                        @GlobalConfig.AppName will use this selection
                        when it creates Stock Items from Shopify Products
                    </small>
                </div>

                <!-- Payment Gateways -->
                <div>
                    <label for="paymentGateways">
                        <strong>Payment Gateways</strong>

                    </label>
                    <a href="#" style="float:right;" data-bind="click:LaunchGatewayPopup">
                        <strong><i class="fas fa-plus"></i> Add Gateway</strong>
                    </a>

                    <div data-bind="if: GatewaysEmpty">
                        <div class="alert alert-secondary">
                            <strong>There are currently no Payment Gateways configured</strong>
                        </div>
                    </div>

                    <div data-bind="ifnot: GatewaysEmpty">
                        <ul class="list-group" data-bind="foreach: SelectedGateways">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    <span class="bold-light" data-bind="text:ShopifyGatewayName"></span><br />
                                    Payment Method - <span data-bind="text: AcumaticaPaymentMethod"></span>
                                    <span style="display:inline-block; width:5px;"></span>
                                    Cash Account - <span data-bind="text: AcumaticaCashAcount"></span>
                                </span>
                                <span>
                                    <a class="btn btn-sm btn-primary" href="#"
                                       data-bind="click: $parent.RemoveGateway"><i class="fas fa-times"></i> Remove</a>
                                </span>
                            </li>
                        </ul>
                    </div>

                    <small id="paymentGatewaysHelp" class="form-text text-muted">
                        Assign Acumatica Payment methods for all of the Payment Gateways you
                        currently have enabled in your Shopify store.
                    </small>
                </div>
            </div>

            <div style="height:30px;"></div>

            <div class="card-footer text-muted">@GlobalConfig.AppName Settings Editor</div>
        </div>

        <div style="height:45px;" data-bind="if: ShowErrorSummary" class="center error-message">
            One or more items are not valid. Please review and correct.
        </div>
    </div>

    <div class="std-pad-b center">
        <div data-bind="ifnot: IsRandomAccessMode">
            <a href="@GlobalConfig.Url("/Config/AcumaticaRefData")" class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Previous Step
            </a>

            <a href="#" data-bind="click: GotoNextStepClick" class="btn btn-success btn-lg">
                Next Step <i class="fas fa-sign-in-alt"></i>
            </a>
        </div>

        <div data-bind="if: IsRandomAccessMode">
            <a href="@GlobalConfig.DiagnosticsHome" class="btn btn-secondary btn-lg">
                Back to Diagnostics <i class="fas fa-undo"></i>
            </a>

            <a href="#" class="btn btn-primary btn-lg" data-bind="click: SaveChangesClick">
                Save Changes <i class="fas fa-bolt"></i>
            </a>
        </div>
    </div>

    <div class="modal fade" id="payment-gateway-modal" tabindex="-1"
         role="dialog" aria-labelledby="payment-gateway-modal" aria-hidden="true">

        <div class="modal-dialog" role="document" style="max-width:600px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="order-sync-settings-modalLabel">Enter Payment Gateway Settings</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div data-bind="template: { 
                     name: 'Payment-Gateway-Modal-Content', data: PaymentGatewayPopupModel }"></div>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Payment-Gateway-Modal-Content">
    <div class="modal-body left">
        <div id="payment-methods" class="card-body left">

            <div class="form-group">
                <label for="paymentMethod">Shopify Payment Gateway</label>

                <select class="form-control"
                        id="shopifyPaymentGateway"
                        data-bind="optionsCaption: 'Choose...',
                                            options: PaymentGateways,
                                            optionsText: 'Name',
                                            value: SelectedShopifyGateway"></select>

                <small id="shopifyPaymentGatewayHelp" class="form-text text-muted">
                    Select a Shopify Payment Gateway
                </small>
            </div>

            <div class="form-group">
                <label for="paymentMethod">Acumatica Payment Method</label>

                <select class="form-control" id="paymentMethod"
                        data-bind="optionsCaption: 'Choose...',
                                            options: PaymentMethods,
                                            optionsText: 'PaymentMethod',
                                            value: SelectedPaymentMethod"></select>

                <small id="paymentMethodHelp" class="form-text text-muted">
                    Select an Acumatica Payment Method to assign to the selected Gateway
                </small>
            </div>

            <div class="form-group">
                <label for="cashAccountMethod">Acumatica Payment Cash Account</label>

                <div data-bind="ifnot: SelectedPaymentMethod">
                    <input type="text"
                           class="form-control"
                           disabled="disabled"
                           value="(Select a Payment Method that has a Cash Account)"/>
                </div>

                <div data-bind="if: SelectedPaymentMethod">
                    <select class="form-control"
                            id="cashAccountMethod"
                            data-bind="options: CashAccounts,
                                        optionsCaption: 'Choose...',
                                        value: SelectedCashAccount"></select>
                </div>

                <small id="cashAccountMethodHelp" class="form-text text-muted">
                    @GlobalConfig.AppName will use this selection when it creates Payments in Acumatica.
                </small>
            </div>
            
            <div style="height:30px;" data-bind="if: ShowValidation">
                <div class="error-message">Please enter data for all of the fields above.</div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
            Cancel <i class="fas fa-times"></i>
        </button>
        <button type="button" data-bind="click: AddPaymentGateway" class="btn btn-primary">
            Add <i class="fas fa-check"></i>
        </button>
    </div>
</script>

<script>
    var Monster = Monster || {};

    var eventKeys = {
        AddPaymentGateway: "/AddPaymentGateway",
    }
    
    Monster.PaymentGatewayPopupModel = function() {
        var self = this;

        // Add Payment Gateway pop-up
        //
        self.PaymentGateways = ko.observableArray();
        self.PaymentMethods = ko.observableArray();
        self.CashAccounts = ko.observableArray();

        self.SelectedShopifyGateway = ko.observable();
        self.SelectedPaymentMethod = ko.observable();
        self.SelectedCashAccount = ko.observable();
        self.ShowValidation = ko.observable(false);

        self.Launch = function() {
            self.SelectedShopifyGateway(null);
            self.SelectedPaymentMethod(null);
            self.SelectedCashAccount(null);
            self.ShowValidation(false);
            $("#payment-gateway-modal").modal('show');
        };

        self.LoadReferenceData = function (data) {
            //console.log(data);
            self.PaymentMethods(data.PaymentMethods);
            self.PaymentGateways(data.PaymentGateways);
        };

        self.SelectedPaymentMethod.subscribe(function () {
            if (self.SelectedPaymentMethod()) {
                self.CashAccounts(self.SelectedPaymentMethod().CashAccounts);

                if (!self.CashAccounts().length) {
                    self.SelectedCashAccount(null);
                }
            } else {
                self.SelectedCashAccount(null);
            }
        });

        self.AddPaymentGateway = function() {
            if (!self.SelectedShopifyGateway() ||
                !self.SelectedPaymentMethod() ||
                !self.SelectedCashAccount()) {
                self.ShowValidation(true);
            } else {
                Monster.Events.publish(eventKeys.AddPaymentGateway, self);
                $("#payment-gateway-modal").modal('hide');
            }
        };
        
        return self;
    };

    Monster.SettingsModel = function () {
        var self = this;

        self.ShowRefDataErrorMessage = ko.observable(false);
        self.ShowDataEntry = ko.observable(false);
        self.IsRandomAccessMode = ko.observable();

        // Reference data
        //
        self.TimeZones = ko.observableArray();
        self.ItemClasses = ko.observableArray();
        
        // Selected options
        //
        self.SelectedTimeZone = ko.observable();
        self.SelectedItemClass = ko.observable();
        self.SelectedPostingClass = ko.computed(
            function () {
                return self.SelectedItemClass() ? self.SelectedItemClass().PostingClass : null;
            });
        self.SelectedGateways = ko.observableArray();
        self.GatewaysEmpty = ko.computed(function() { return self.SelectedGateways().length == 0 });

        // Validation
        //
        self.TimeZoneValid = ko.computed(function () { return self.SelectedTimeZone(); });

        self.ItemClassValid = ko.computed(function () {
            return self.SelectedItemClass() && self.SelectedPostingClass();
        });

        self.IsValid = ko.computed(function() {
            return self.TimeZoneValid() && self.ItemClassValid();
        });

        self.ShowValidation = ko.observable(false);

        self.ShowErrorSummary = ko.computed(function () {
            return self.ShowValidation() && !self.IsValid();
        });

        // Add Payment Gateway pop-up
        //
        self.PaymentGatewayPopupModel = new Monster.PaymentGatewayPopupModel();

        // Gateway CRUD
        //
        self.LaunchGatewayPopup = function() {
            self.PaymentGatewayPopupModel.Launch();
        };

        self.AddPaymentGateway = function (model) {
            self.SelectedGateways.push({
                AcumaticaCashAcount: model.SelectedCashAccount(),
                AcumaticaPaymentMethod:  model.SelectedPaymentMethod().PaymentMethod,
                ShopifyGatewayId: model.SelectedShopifyGateway().Id,
                ShopifyGatewayName: model.SelectedShopifyGateway().Name,
            });
        };

        self.RemoveGateway = function (item) {
            self.SelectedGateways.remove(item);
        };

        Monster.Events.subscribe(eventKeys.AddPaymentGateway, self.AddPaymentGateway);


        // Initialization stuff
        //
        self.Initialize = function () {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/AcumaticaRefDataStatus", this);
                },
                function (response) {
                    self.IsRandomAccessMode(response.IsRandomAccessMode);

                    if (response.IsBroken) {
                        self.ShowRefDataErrorMessage(true);
                        return;
                    }

                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/AcumaticaReferenceData", this);
                },
                function (response) {
                    self.TimeZones(response.TimeZones);
                    self.ItemClasses(response.ItemClasses);
                    self.PaymentGatewayPopupModel.LoadReferenceData(response);

                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/SettingsSelections", this);
                },
                function (response) {
                    console.log(response);

                    self.SelectedTimeZone(response.AcumaticaTimeZone);
                    self.SelectedItemClass(response.AcumaticaDefaultItemClass);
                    self.SelectedGateways(response.PaymentGateways);

                    var itemClass =
                        Monster.FindByField(self.ItemClasses(), 'ItemClass', response.AcumaticaDefaultItemClass);

                    self.SelectedItemClass(itemClass);

                    var timeZone = Monster.FindByField(self.TimeZones(), 'TimeZoneId', response.AcumaticaTimeZone);

                    self.SelectedTimeZone(timeZone);
                    self.ShowDataEntry(true);
                });
        };

        self.SaveChangesClick = function () {
            self.SaveChanges();
        }

        self.SaveChanges = function (callback) {
            flow.exec(function() {
                self.ShowValidation(true);
                if (!self.IsValid()) {
                    return;
                }

                var model = {};

                model.AcumaticaTimeZone = self.SelectedTimeZone().TimeZoneId;
                model.AcumaticaDefaultItemClass = self.SelectedItemClass().ItemClass;
                model.AcumaticaDefaultPostingClass = self.SelectedPostingClass();
                model.PaymentGateways = self.SelectedGateways();

                var ajax = new Monster.Ajax();
                ajax.HttpPost("Config/SettingsSelections", model, this);
            },
            function() {
                if (callback) {
                    callback();
                }
            });
        }

        self.GotoNextStepClick = function() {
            self.SaveChanges(
                function () {
                    if (!self.IsValid()) {
                        return;
                    }

                    window.location.href = '@GlobalConfig.Url("/Config/SettingsTaxes")';
                });
            };

        return self;
    };

    var model = new Monster.SettingsModel();
    model.Initialize();
    ko.applyBindings(model);
</script>

