@using Monster.Middle.Persist.Multitenant.Model
@using Monster.Web.Plumbing


<div class="center std-padding">
    <img style="width: 125px;" src="@GlobalConfig.Url("Content/ShopifySyncWithAcumatica.png")" />
</div>

<hr/>
<h1 class="mt-5 center">Warehouse &amp; Location Mapping</h1>
<p class="lead center">Synchronize your Acumatica Warehouses with Shopify Locations</p>

<style>
    #step-1 { display: none; }
    #step-2 { display: none; }
</style>

<div data-bind="if: Step1Visible">
    <div class="std-padding">
        <div class="alert alert-primary" role="alert">
            Each of your <strong>Shopify Location Names</strong> must match identifically 
            with one <strong>Acumatica Warehouse ID</strong>, and vice-versa.
        </div>
        <p>In order to work properly, Odysseus needs a one-to-one mapping between
            all of your Shopify Locations and Acumatica Warehouses.
            Luckily, Odysseus will automatically detect if both systems
            are properly in-sync, or not, and report the results to you.</p>

        <div class="center std-padding">
            <a href="@GlobalConfig.Url("Config/Preferences")"
               class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Go Back to Config   
            </a>

            <a href="#" class="btn btn-primary btn-lg"
               data-bind="click: SynchronizeClick">Synchronize Now
                <i class="fas fa-bolt"></i>
            </a>
        </div>
    </div>
</div>

<div data-bind="if: Step2Visible">
    <div class="std-padding">
        <div class="card">
            <div class="card-body center std-padding">
                <img style="width: 125px;" src="@GlobalConfig.Url("Content/throbber_12.gif")" />

                <div style="height: 30px;"></div>

                <p>Please wait while Odysseus pulls both Warehouse and Location data.</p>
            </div>
        </div>
    </div>
</div>

<div data-bind="if: Step3Visible">
    <div class="std-padding" data-bind="with: SyncState">
        <div class="card">
            <div class="card-body center std-padding">                
                <div data-bind="if: OK">
                    <h5 class="card-title">Synchronization Complete!</h5>
                </div>
                <div data-bind="ifnot: OK">
                    <h5 class="card-title">Synchronization Incomplete!</h5>
                </div>

                <div data-bind="if: MatchedWarehouseLocations.length">
                    <p>The following Location-Warehouse combinations successfully matched:</p>

                    <ul class="list-group"
                        data-bind="foreach: MatchedWarehouseLocations">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span data-bind="text: $data"></span>
                            <i class="fas fa-check"></i>
                        </li>
                    </ul>
                </div>

                <div data-bind="if: !OK">
                    <div style="height: 40px;"></div>
                    <p>The following Locations and Warehouses could <strong>not</strong> be matched:</p>
                    <ul class="list-group">
                        <!-- ko foreach: UnmatchedShopifyLocations -->
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Shopify <span data-bind="text: $data"></span>
                            <i style="color: red;" class="fas fa-times"></i>
                        </li>
                        <!-- /ko -->

                        <!-- ko foreach: UnmatchedAcumaticaWarehouses -->
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Acumatica <span data-bind="text: $data"></span>
                            <i style="color: red;" class="fas fa-times"></i>
                        </li>
                        <!-- /ko -->
                    </ul>
                    <div class="alert alert-warning left" role="alert">
                        <strong>
                            ACTION STEPS: add, delete or rename Warehouses and Locations as needed
                            so that they map exactly. Then click "Synchronize Now", below.
                        </strong>
                    </div>
                </div>
            </div>
        </div>

        <div class="center std-padding">
            <a href="@GlobalConfig.Url("Config/Preferences")" 
               class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Go Back to Config
            </a>
            
            <span data-bind="if: OK">
                <a href="@GlobalConfig.Url("Config/Inventory")" 
                   class="btn btn-success btn-lg">
                    Go to Next Step <i class="fas fa-sign-in-alt"></i>
                </a>
            </span>
            
            <span data-bind="if: !OK">
                <a href="#" class="btn btn-primary btn-lg"
                   data-bind="click: $parent.SynchronizeClick">Synchronize Now
                    <i class="fas fa-bolt"></i>
                </a>
            </span>
        </div>
    </div>
</div>


<script>
    var Monster = Monster || {};

    Monster.WarehouseConfigModel = function () {
        var self = this;

        self.Step1Visible = ko.observable();
        self.Step2Visible = ko.observable();
        self.Step3Visible = ko.observable();
        self.SyncState = ko.observable();


        self.ClearVisibility = function() {
            self.Step1Visible(false);
            self.Step2Visible(false);
            self.Step3Visible(false);
        };

        self.SynchronizeClick = function() {
            self.ClearVisibility();
            self.Step2Visible(true);

            var ajax = new Monster.Ajax();
            ajax.HttpPost("Config/SyncWarehouses", {}, self.PollStatus);
        };

        self.PollStatus = function() {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/WarehouseSyncStatus", this);
                },
                function (response) {
                    console.log(response);

                    if (response.JobStatus == jobStatus.Complete) {
                        self.Complete(response);
                    } else {
                        setTimeout(self.PollStatus, 1000);
                    }
                });
        };

        self.Complete = function(statusModel) {
            console.log(statusModel);
            self.ClearVisibility();
            self.Step3Visible(true);
            self.SyncState(statusModel.SyncState);
        };

        self.Initialize = function () {
            self.ClearVisibility();
            self.Step1Visible(true);
        };

        return self;
    };

    var model = new Monster.WarehouseConfigModel();
    model.Initialize();
    ko.applyBindings(model);
</script>

