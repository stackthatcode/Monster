@using Monster.Web.Plumbing


<main role="main" class="medium-size">

    @Html.Partial("_TopBrand")

    <hr />
    <h1 class="mt-4 center">Warehouse &amp; Location Mapping</h1>
    <p class="lead center">Synchronize your Acumatica Warehouses with Shopify Locations</p>

    <div data-bind="ifnot: IsJobRunning">
        <div data-bind="if: WarehouseSyncState() == SystemState.None">
            <div class="card">
                <div class="card-body">
                    <p>
                        The next step is configure mappings between your Shopify Locations 
                        and Acumatica Warehouses. 
                        @GlobalConfig.AppName will pull data from both systems then allow 
                        for manual assignment.
                    </p>
                
                    <div class="alert alert-warning" role="alert">
                        @GlobalConfig.AppName allows for mapping the same Location
                        to multiple Warehouses. In these cases, when Inventory is synchronized,
                        the Location's will be updated with the aggregate sum. 
                    </div>
                </div>
            </div>
        </div>

        <div data-bind="if: WarehouseSyncState() == SystemState.SystemFault">
            <div class="card">
                <div class="card-body">
                    <div class="alert alert-danger">
                        <strong>Warehouse Location Synchronization - System Fault</strong>
                    </div>
                    <p>
                        Something went wrong while attempting to synchronize your
                        Acumatica Warehouses and Locations. Please try re-running
                        this process.
                    </p>
                </div>
            </div>
        </div>

        <div data-bind="if: WarehouseSyncState() == SystemState.Ok ||
                            WarehouseSyncState() == SystemState.Invalid">
           
            <div data-bind="template: { name: 'Sync-State-Details' }"></div>
        </div>
    </div>

    <div data-bind="if: IsJobRunning">
        <div class="card">
            <div class="card-body center std-pad-t">
                <img style="width: 100px;" src="@GlobalConfig.Url("Content/throbber_12.gif")" />

                <div style="height: 30px;"></div>

                <p class="center">Please wait while @GlobalConfig.AppName synchronizes Warehouses and Locations.</p>
            </div>
        </div>
    </div>
    
    
    <!-- Bottom Controls -->
    <div class="center std-pad-t">
        <span data-bind="ifnot: IsRandomAccessMode">
            <a href="@GlobalConfig.Url("Config/Preferences")"
               class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Previous Step
            </a>
        </span>

        <span data-bind="if: IsRandomAccessMode">
            <a href="@GlobalConfig.DiagnosticsHome"
               class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Back to Diagnostics
            </a>
        </span>
        
        <span data-bind="if: SynchronizeVisible">
            <a href="#" class="btn btn-primary btn-lg"
               data-bind="click: SynchronizeClick">
                Synchronize Now
                <i class="fas fa-bolt"></i>
            </a>
        </span>

        <span data-bind="if: NextButtonVisible">
            <a href="@GlobalConfig.Url("RealTime/InventorySyncControl")"
               class="btn btn-success btn-lg">
                Next Step <i class="fas fa-sign-in-alt"></i>
            </a>
        </span>
    </div>
</main>


<script type="text/html" id="Sync-State-Details">
    <div data-bind="with: Details">
        <div class="card">
            <div class="card-body center std-pad">

                <div data-bind="if: MatchedWarehouseLocations.length">
                    <p>The following Location-Warehouse combinations successfully matched:</p>

                    <ul class="list-group"
                        data-bind="foreach: MatchedWarehouseLocations">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span data-bind="text: $data"></span>
                            <i class="fas fa-check"></i>
                        </li>
                    </ul>
                </div>

                <div data-bind="if: UnmatchedShopifyLocations.length ||
                                    UnmatchedAcumaticaWarehouses.length">
                    <div style="height: 40px;"></div>
                    <p>The following Locations and Warehouses could <strong>not</strong> be matched:</p>
                    <ul class="list-group">
                        <!-- ko foreach: UnmatchedShopifyLocations -->
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Shopify <span data-bind="text: $data"></span>
                            <i style="color: red;" class="fas fa-times"></i>
                        </li>
                        <!-- /ko -->
                        <!-- ko foreach: UnmatchedAcumaticaWarehouses -->
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Acumatica <span data-bind="text: $data"></span>
                            <i style="color: red;" class="fas fa-times"></i>
                        </li>
                        <!-- /ko -->
                    </ul>
                    <div class="alert alert-warning left" role="alert">
                        <strong>
                            ACTION STEPS: add, delete or rename Warehouses and Locations as needed
                            so that they map exactly. Then click re-run the synchronization process.
                        </strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var Monster = Monster || {};

    Monster.WarehouseConfigModel = function () {
        var self = this;

        self.IsJobRunning = ko.observable();
        self.Details = ko.observable();
        self.IsRandomAccessMode = ko.observable();

        self.WarehouseSyncState = ko.observable();

        self.NextButtonVisible = ko.computed(function () {
            return !self.IsRandomAccessMode()
                && self.WarehouseSyncState() == SystemState.Ok;
        });

        self.SynchronizeVisible =  ko.computed(function () {
            return self.WarehouseSyncState() == SystemState.SystemFault ||
                self.WarehouseSyncState() == SystemState.Invalid;
        });

        self.SaveButtonVisible = ko.computed(function() {
            return self.WarehouseSyncState() == SystemState.Ok ||
                self.WarehouseSyncState() == SystemState.None;
        });

        self.SynchronizeClick = function () {
            var ajax = new Monster.Ajax();
            ajax.HttpPost("Config/SyncWarehouses", {}, self.PollStatus);
        };

        self.PollStatus = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.DisablePopupsAndSpinners();
                    ajax.HttpGet("Config/WarehouseSyncStatus", this);
                },
                function (response) {
                    self.IsJobRunning(response.IsJobRunning);

                    if (self.IsJobRunning()) {
                        setTimeout(self.PollStatus, 1000);
                    } else {
                        self.Complete(response);
                    }
                });
        };

        self.Complete = function (model) {
            self.IsRandomAccessMode(model.IsRandomAccessMode);
            self.IsJobRunning(model.IsIsJobRunning);
            self.WarehouseSyncState(model.WarehouseSyncState);

            self.Details(model.Details);


            //console.log(model);
        };

        self.Initialize = function () {
            self.PollStatus();
        };

        return self;
    };

    var model = new Monster.WarehouseConfigModel();
    model.Initialize();
    ko.applyBindings(model);
</script>

