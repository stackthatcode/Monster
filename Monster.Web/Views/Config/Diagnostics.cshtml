@using Monster.Web.Plumbing

<style>
    .container {
        width: auto;
        max-width: 860px;
        padding: 0 15px;
    }

    .diagnosis-item .badge {
        padding: 8px;
    }
</style>

<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")
    <hr />
    <div>
        <h1 class="mt-4 center">@GlobalConfig.AppName Config Diagnostics</h1>
        <p class="lead center">Configuration Diagnostics</p>
    </div>

    <!-- Will yield to showing End-to-End Sync in case somehow both got triggered -->
    <div data-bind="if: JobRunningModel.AreAnyJobsRunning">
        <div class="card center">
            <div class="card-body std-pad-b">
                <div data-bind="template: { name: 'Job-Running-Panel', data: JobRunningModel }"></div>
            </div>
        </div>
    </div>

    <div data-bind="ifnot: JobRunningModel.AreAnyJobsRunning">
        <div class="card">
            <div class="card-body std-pad-b">
                <div data-bind="if: IsConfigReady">
                    <div class="alert alert-info">
                        <strong>System OK - Ready to Start End-to-End Sync</strong>
                    </div>

                    <p>
                        Your @GlobalConfig.AppName diagnostics appear healthy (see summary below).
                        You can modify your configuration and re-run diagnostics, as needed.
                        Else, you can now start End-to-End Synchronization.
                    </p>
                </div>

                <div data-bind="ifnot: IsConfigReady">
                    <div class="alert alert-danger">
                        <strong>End-to-End Synchronization - Disabled</strong>
                    </div>

                    <p>
                        Something is wrong with your current @GlobalConfig.AppName configuration.
                        Review the diagnostics summary below and identify which areas of
                        configuration need to be fixed or amended.
                    </p>
                </div>

                <div class="center">
                    <a href="#" data-bind="click: StartConfigDiagnosisClick" class="btn btn-primary btn-lg">
                        Run Config Diagnostics <i class="fas fa-user-md"></i>
                    </a>
                </div>

                <div style="height: 20px;"></div>

                <ul class="list-group"
                    style="font-size: 0.9em;"
                    data-bind="foreach: ConfigDiagnosis">

                    <li class="list-group-item d-flex justify-content-between align-items-center"
                        data-bind="template: { name: 'Configuration-Diagnostic' }">
                    </li>
                </ul>
            </div>
        </div>
    </div>
</main>

<script type="text/html" id="Configuration-Diagnostic">
    <span data-bind="text: Name"></span>

    <span class="diagnosis-item">
        <span data-bind="if: ConfigState == StateCode.Ok">
            <span class="badge badge-success">
                OK <i class="fas fa-check"></i>
            </span>
        </span>
        <span data-bind="if: ConfigState == StateCode.None">
            <span class="badge badge-danger">
                None <i class="fas fa-times"></i>
            </span>
        </span>
        <span data-bind="if: ConfigState == StateCode.SystemFault">
            <span class="badge badge-danger">
                System Fault <i class="fas fa-times"></i>
            </span>
        </span>
        <span data-bind="if: ConfigState == StateCode.Invalid">
            <span class="badge badge-danger">
                Invalid <i class="fas fa-times"></i>
            </span>
        </span>

        <span style="display: inline-block; width: 40px;"></span>
        <strong>
            <a href="#" data-bind="attr: { href: Url }">Click to Modify</a>
        </strong>
    </span>
</script>

<script>
var Monster = Monster || {};

Monster.InventoryConfigModel = function() {
    var self = this;

    // Job Status
    //
    self.JobRunningModel = new Monster.JobStatusModel();
    
    // Diagnosis
    //
    self.IsConfigReady = ko.observable(false);
    self.ConfigDiagnosis = ko.observableArray();

    self.StartConfigDiagnosisClick = function () {
        var ajax = new Monster.Ajax();
        ajax.HttpPost("/Config/TriggerConfigDiagnosis", {}, null);
        self.JobRunningModel.StartPolling(true);
    };

    self.RetrieveDiagnosis = function() {
        flow.exec(function() {
                var ajax = new Monster.Ajax();
                ajax.HttpGet("/Config/ConfigDiagnosis", this);
            },
            function (response) {
                var configData = [
                    {
                        Name: "Shopify Connection",
                        ConfigState: response.ShopifyConnection,
                        Url: "@GlobalConfig.Url("/ShopifyAuth/Domain")",
                    },
                    {
                        Name: "Acumatica Connection",
                        ConfigState: response.AcumaticaConnection,
                        Url: "@GlobalConfig.Url("/Config/AcumaticaConnection")",
                    },
                    {
                        Name: "Acumatica Reference Data",
                        ConfigState: response.AcumaticaReferenceData,
                        Url: "@GlobalConfig.Url("/Config/AcumaticaRefData")",
                    },
                    {
                        Name: "Settings",
                        ConfigState: response.Settings,
                        Url: "@GlobalConfig.Url("/Config/Settings")",
                    },
                    {
                        Name: "Settings -> Taxes",
                        ConfigState: response.SettingsTax,
                        Url: "@GlobalConfig.Url("/Config/SettingsTaxes")",
                    },
                    {
                        Name: "Warehouse Synchronization",
                        ConfigState: response.WarehouseSync,
                        Url: "@GlobalConfig.Url("/Config/Warehouses")",
                    },
                ];

                self.ConfigDiagnosis(configData);
                self.IsConfigReady(response.IsConfigReady);
            });
    };

    Monster.Events.subscribe(Monster.JobStatusRunningComplete, function () { self.RetrieveDiagnosis(); });

    self.Initialize = function() {
        self.JobRunningModel.StartPolling(true); 
    };


    return self;
}

var model = new Monster.InventoryConfigModel();
ko.applyBindings(model);
model.Initialize();
</script>
