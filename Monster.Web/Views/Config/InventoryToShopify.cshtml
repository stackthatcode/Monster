@using Monster.Web.Plumbing

@Html.Partial("_SharedKnockoutViews")

<main role="main" class="medium-size">

    @Html.Partial("_TopBrand")
    <hr />
    <h1 class="mt-4 center">Inventory - Load into Shopify</h1>
    <p class="lead center">Synchronize Shopify with Acumatica inventory counts</p>


    <div data-bind="ifnot: IsJobRunning">
        <div class="std-padding">
            <div data-bind="if: ShopifyInventoryPushState() == SystemState.None">
                <p>
                    @GlobalConfig.AppName is now ready to complete the first update of
                    Shopify Inventory counts with Acumatica Inventory.
                    During this run, the complete counts from Acumatica's Inventory
                    will be brought over to Shopify.
                    After this step, @GlobalConfig.AppName will only incrementally
                    synchronize counts that have changed since the last update.
                </p>
            </div>

            <div data-bind="if: ShopifyInventoryPushState() == SystemState.SystemFault">
                <div class="alert alert-danger">
                    <strong>Load Inventory into Shopify - System Fault</strong>
                </div>
                <p>
                    Something went wrong while running this process.
                    You may consider reviewing your configuration before
                    re-running. If issue persists, contact support.
                </p>
            </div>

            <div data-bind="if: ShopifyInventoryPushState() == SystemState.Ok">
                <div class="alert alert-info">
                    <strong>Load Inventory into Shopify - OK</strong>
                </div>
                <p>
                    This process has successfully completed.
                    Real-time Synchronziation can now run incremental updates.
                </p>
            </div>
        </div>

        <div class="std-padding-bottom center">
            <span data-bind="ifnot: IsRandomAccessMode">
                <a href="@GlobalConfig.Url("Config/InventoryToAcumatica")"
                   class="btn btn-secondary btn-lg">
                    <i class="fas fa-undo"></i> Previous Step
                </a>
            </span>

            <span data-bind="if: IsRandomAccessMode">
                <a href="@GlobalConfig.DiagnosticsHome"
                   class="btn btn-secondary btn-lg">
                    <i class="fas fa-undo"></i> Back to Diagnostics
                </a>
            </span>

            <a href="#" class="btn btn-primary btn-lg"
               data-bind="click: PushInventoryToShopifyClick">
                Synchronize Now <i class="fas fa-bolt"></i>
            </a>

            <span data-bind="if: IsNextButtonVisible">
                <a href="@GlobalConfig.Url("RealTime/RealTime")"
                   class="btn btn-success btn-lg">
                    Next Step <i class="fas fa-sign-in-alt"></i>
                </a>
            </span>
        </div>
    </div>

    <div data-bind="if: IsJobRunning">
        <div class="std-padding">
            <div class="card">
                <div class="card-body center std-padding">
                    <img style="width: 125px;" src="@GlobalConfig.Url("Content/throbber_12.gif")" />

                    <div style="height: 30px;"></div>

                    <p class="center">
                        @GlobalConfig.AppName is currently busy processing your inventory.<br />
                        Depending on the size of your catalog, this process may take up to several hours.
                    </p>
                    
                    <hr />

                    <div data-bind="template: { name: 'Execution-Logs', data: Logs() } "></div>
                </div>
            </div>
        </div>
    </div>
</main>


<script>
    var Monster = Monster || {};

    Monster.InventoryConfigModel = function () {
        var self = this;

        self.IsJobRunning = ko.observable();
        self.IsRandomAccessMode = ko.observable();
        self.ShopifyInventoryPushState = ko.observable();
        self.Logs = ko.observableArray();

        self.IsNextButtonVisible = ko.computed(function () {
            return !self.IsRandomAccessMode()
                && self.ShopifyInventoryPushState() == SystemState.Ok;
        });

        self.PushInventoryToShopifyClick = function () {
            var ajax = new Monster.Ajax();
            ajax.HttpPost("Config/PushInventoryToShopify", {}, self.PollStatus);
        };


        self.PollStatus = function () {
            flow.exec(
                function () {
                    var ajax = new Monster.Ajax();
                    ajax.DisablePopupsAndSpinners();
                    ajax.HttpGet("Config/ShopifyInventoryPushStatus", this);
                },
                function (response) {
                    //console.log(response);

                    self.IsJobRunning(response.IsBackgroundJobRunning);
                    self.ShopifyInventoryPushState(response.SystemState);
                    self.IsRandomAccessMode(response.IsRandomAccessMode);
                    self.Logs(response.Logs);

                    if (self.IsJobRunning()) {
                        setTimeout(self.PollStatus, 1000);
                    }
                });
        };

        self.Initialize = function () {
            self.PollStatus();
        };

        return self;
    };

    var model = new Monster.InventoryConfigModel();
    model.Initialize();
    ko.applyBindings(model);
</script>
