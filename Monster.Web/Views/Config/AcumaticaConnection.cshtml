@using Monster.Web.Plumbing
@model Monster.Web.Models.Config.SettingsSelectionsModel


<style>
    .form-group label {
        font-weight: 700;
    }
</style>

<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")
    <hr />
    <h1 class="mt-4 center">Configuration - Acumatica</h1>
    <p class="lead center">
        Manage credentials and connect to your Acumatica instance
    </p>

    <div data-bind="if: JobRunningModel.AreAnyJobsRunning">
        <div class="card">
            <div class="card-body center">
                <div class="std-pad-b">
                    <div data-bind="template: { name: 'Job-Running-Panel', data: JobRunningModel }"></div>
                </div>
            </div>
        </div>
    </div>

    <div data-bind="ifnot: JobRunningModel.AreAnyJobsRunning">
        <div data-bind="ifnot: IsRandomAccessMode">
            <p>
                Now, we will connect @GlobalConfig.AppName to your Acumatica instance.
                In preparation, make sure you have selected the correct Acumatica instance
                and have the appropriate security credentials for access.
            </p>
        </div>
        <div data-bind="if: DataEntryVisible">
            <div data-bind="template: { name: 'Data-Entry-View' }"></div>
        </div>
        <div data-bind="if: StatusVisible">
            <div data-bind="template: { name: 'Status-View' }"></div>
        </div>
    </div>
</main>

<script id="Status-View" type="text/html">
    <div class="std-pad-b">
        <div data-bind="if: IsConnectionOk">
            <div class="alert alert-primary">
                <strong>Connection - OK</strong>
                - @GlobalConfig.AppName now has access to your Acumatica instance and can begin reading data.
            </div>
        </div>

        <div data-bind="if: IsConnectionBroken">
            <div class="alert alert-danger">
                <strong>Connection - Broken</strong>
                - Something is wrong with your Acumatica Connection. Try re-connecting or possibly changing your credentials.
            </div>
        </div>

        <div class="card text-center">
            <div class="card-body" style="text-align: left;">
                <div class="form-group">
                    <label for="instanceUrl">Acumatica Instance URL</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaInstanceUrl" />
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Company</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaCompany" />
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Branch</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaBranch" />
                </div>

                <div data-bind="if: HasConnectionBeenSet"
                     style="text-align: center; width: 100%; margin-bottom: 15px;">
                    <a href="#" class="btn btn-light btn-sm"
                       data-bind="click: ChangeSettingsClick">
                        Change your Acumatica Credentials  <i class="fas fa-pencil-alt"></i>
                    </a>
                    <hr />
                </div>

                <div class="center">
                    <span data-bind="if: IsPrevButtonVisible">
                        <a href="@GlobalConfig.Url("/ShopifyAuth/Domain")"
                           class="btn btn-secondary btn-lg">
                            Previous Step <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <span data-bind="if: IsRandomAccessMode">
                        <a href="@GlobalConfig.DiagnosticsHome" class="btn btn-secondary btn-lg">
                            Back to Diagnostics <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <span data-bind="if: HasConnectionBeenSet">
                        <a href="#" class="btn btn-primary btn-lg" data-bind="click: AcumaticaTestConnection">
                            Re-connect to Acumatica <i class="fas fa-bolt"></i>
                        </a>
                    </span>

                    <span data-bind="ifnot: HasConnectionBeenSet">
                        <a href="#" class="btn btn-primary btn-lg" data-bind="click: ChangeSettingsClick">
                            Enter Credentials <i class="fas fa-pencil-alt"></i>
                        </a>
                    </span>

                    <span data-bind="if: IsNextButtonVisible">
                        <a href="@GlobalConfig.Url("/Config/AcumaticaRefData")" class="btn btn-success btn-lg">
                            Next Step <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</script>

<script id="Data-Entry-View" type="text/html">
    <div class="std-pad-b">
        <div class="card text-center">
            <div class="card-body" style="text-align: left;">
                <div class="form-group">
                    <label for="instanceUrl">Acumatica Instance URL</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaInstanceUrl" />
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               id="instanceUrl"
                               placeholder="Enter your Acumatica Instance URL"
                               data-bind="value: AcumaticaInstanceUrl" />

                        <small id="urlHelp" class="form-text text-muted">
                            E.G.: https://acucode.acumaticacloud.com
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Company</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaCompany" />
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="text"
                               class="form-control"
                               id="company"
                               placeholder="Enter the Acumatica Company"
                               data-bind="value: AcumaticaCompany" />

                        <small id="companyHelp" class="form-text text-muted">
                            E.G.: MYCOMPANY
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Branch</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaBranch" />
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="text"
                               class="form-control"
                               id="branch"
                               placeholder="Enter the Acumatica Branch"
                               data-bind="value: AcumaticaBranch" />

                        <small id="branchHelp" class="form-text text-muted">
                            E.G.: MYCOMPANY
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="username">Acumatica User Name</label>
                    <input type="text"
                           class="form-control"
                           id="username"
                           placeholder="Enter the Acumatica User Name"
                           data-bind="value: AcumaticaUserName" />
                </div>

                <div class="form-group">
                    <label for="username">Acumatica Password</label>
                    <input type="password"
                           class="form-control"
                           id="password"
                           placeholder="Enter the Acumatica Password"
                           data-bind="value: AcumaticaPassword" />
                </div>

                <div class="center">
                    <span data-bind="if: IsCancelButtonVisible">
                        <a href="#" class="btn btn-secondary btn-lg"
                           data-bind="click: ShowStatusPanel">
                            Cancel <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <a href="#" class="btn btn-primary btn-lg"
                       data-bind="click: PushCredentials">
                        Connect to Acumatica <i class="fas fa-bolt"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var Monster = Monster || {};

    Monster.AcumaticaConnectionModel = function() {
        var self = this;

        self.JobRunningModel = new Monster.JobStatusModel();

        // View visibility
        self.DataEntryVisible = ko.observable();
        self.StatusVisible = ko.observable();

        self.ClearVisibility = function() {
            self.StatusVisible(false);
        };

        // System State
        self.ConnectionState = ko.observable();
        self.IsUrlFinalized = ko.observable();
        self.IsRandomAccessMode = ko.observable();

        self.HasConnectionBeenSet = ko.computed(function() {
            return self.ConnectionState() != StateCode.None;
        });

        self.IsConnectionOk = ko.computed(function() {
            return self.ConnectionState() == StateCode.Ok;
        });

        self.IsConnectionBroken = ko.computed(function() {
            return self.ConnectionState() == StateCode.SystemFault
                || self.ConnectionState() == StateCode.Invalid;
        });


        // Control-visibility
        //
        self.IsNextButtonVisible = ko.computed(function() {
            return !self.IsRandomAccessMode() && self.IsConnectionOk();
        });

        self.IsPrevButtonVisible = ko.computed(function() {
            return !self.IsRandomAccessMode();
        });

        self.IsCancelButtonVisible = ko.computed(function() {
            return self.HasConnectionBeenSet();
        });


        // Data-entry State
        //
        self.AcumaticaInstanceUrl = ko.observable();
        self.AcumaticaCompany = ko.observable();
        self.AcumaticaBranch = ko.observable();
        self.AcumaticaUserName = ko.observable();
        self.AcumaticaPassword = ko.observable();

        
        // Actions
        self.ChangeSettingsClick = function () {
            self.ClearVisibility();
            @{
            // Debugging stuff - fast and easy - my way!
            if (GlobalConfig.DebugMode)
            {
                <text>
                    self.AcumaticaInstanceUrl("http://localhost/Acu19R100021");
                    self.AcumaticaCompany("MYCOMPANY");
                    self.AcumaticaBranch("MYCOMPANY");
                    self.AcumaticaUserName("admin");
                    self.AcumaticaPassword("123456");
                </text>
            }
        }
            self.DataEntryVisible(true);
        };

        self.ShowStatusPanel = function() {
            flow.exec(
                function() {
                    self.ClearVisibility();
                    self.StatusVisible(true);
                    self.DataEntryVisible(false);

                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("/Config/AcumaticaCredentials", this);
                },
                function(response) {
                    self.AcumaticaInstanceUrl(response.InstanceUrl);
                    self.AcumaticaCompany(response.Company);
                    self.AcumaticaBranch(response.Branch);
                });
        }

        self.PushCredentials = function() {
            var model = {
                InstanceUrl: self.AcumaticaInstanceUrl(),
                Company: self.AcumaticaCompany(),
                Branch: self.AcumaticaBranch(),
                UserName: self.AcumaticaUserName(),
                Password: self.AcumaticaPassword()
            };

            var ajax = new Monster.Ajax();
            ajax.HttpPost("/Config/AcumaticaCredentials", model, self.PollStatus);
        };

        self.AcumaticaTestConnection = function() {
            var ajax = new Monster.Ajax();
            ajax.HttpPost("/Config/AcumaticaTestConnection", {}, self.PollStatus);
        };

        self.ProcessStatus = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("/Config/AcumaticaConnectionStatus", this);
                },
                function(response) {
                    // Status model
                    //
                    self.ConnectionState(response.ConnectionState);
                    self.IsUrlFinalized(response.IsUrlFinalized);
                    self.IsRandomAccessMode(response.IsRandomAccessMode);

                    console.log(response);

                    if (self.ConnectionState() == StateCode.None) {
                        self.ChangeSettingsClick();
                    } else {
                        self.ShowStatusPanel();
                    }
                }
            );

            self.ClearVisibility();
        };

        Monster.Events.subscribe(Monster.JobStatusRunningComplete, function () { self.ProcessStatus(); });

        self.Initialize = function() {
            self.ClearVisibility();
            self.JobRunningModel.StartPolling(true);
        };

        return self;
    };

    var model = new Monster.AcumaticaConnectionModel();
    model.Initialize();
    ko.applyBindings(model);
    </script>

