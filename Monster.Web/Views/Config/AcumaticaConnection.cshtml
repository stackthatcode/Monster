@using Monster.Web.Plumbing
@model Monster.Web.Models.Config.PreferencesModel


<style>
    .form-group label {
        font-weight: 700;
    }
</style>

@Html.Partial("_TopBrand")

<hr />

<h1 class="mt-5 center">Configuration - Acumatica</h1>
<p class="lead center">
    Manage credentials and connect to your Acumatica instance
</p>

<div data-bind="ifnot: IsRandomAccessMode">
    <p>
        Now, we will connect @GlobalConfig.AppName to your Acumatica instance.
        In preparation, make sure you have selected the correct Acumatica instance
        and have the appropriate security credentials for access.
    </p>
</div>

<div data-bind="if: DataEntryVisible">
    <div class="std-padding">

        <div class="card text-center">
            <div class="card-body" style="text-align: left;">
                <div class="form-group">
                    <label for="instanceUrl">Acumatica Instance URL</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaInstanceUrl"/>
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               id="instanceUrl"
                               placeholder="Enter your Acumatica Instance URL"
                               data-bind="value: AcumaticaInstanceUrl"/>

                        <small id="urlHelp" class="form-text text-muted">
                            E.G.: https://acucode.acumaticacloud.com
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Company</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaCompany"/>
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="text"
                               class="form-control"
                               id="company"
                               placeholder="Enter the Acumatica Company"
                               data-bind="value: AcumaticaCompany"/>

                        <small id="companyHelp" class="form-text text-muted">
                            E.G.: MYCOMPANY
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Branch</label>

                    <div data-bind="if: IsUrlFinalized">
                        <input type="url"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: AcumaticaBranch"/>
                    </div>

                    <div data-bind="ifnot: IsUrlFinalized">
                        <input type="text"
                               class="form-control"
                               id="branch"
                               placeholder="Enter the Acumatica Branch"
                               data-bind="value: AcumaticaBranch"/>

                        <small id="branchHelp" class="form-text text-muted">
                            E.G.: MYCOMPANY
                        </small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="username">Acumatica User Name</label>
                    <input type="text"
                           class="form-control"
                           id="username"
                           placeholder="Enter the Acumatica User Name"
                           data-bind="value: AcumaticaUserName"/>
                </div>

                <div class="form-group">
                    <label for="username">Acumatica Password</label>
                    <input type="password"
                           class="form-control"
                           id="password"
                           placeholder="Enter the Acumatica Password"
                           data-bind="value: AcumaticaPassword"/>
                </div>

                <div class="center std-padding">
                    <span data-bind="if: IsCancelButtonVisible">
                        <a href="#" class="btn btn-secondary btn-lg"
                           data-bind="click: ShowStatusPanel">
                            Cancel <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <a href="#" class="btn btn-primary btn-lg"
                       data-bind="click: PushCredentials">
                        Connect to Acumatica <i class="fas fa-bolt"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div data-bind="if: BackgroundJobRunning">
    <div class="std-padding">
        <div class="card">
            <div class="card-body center std-padding">
                <img style="width: 125px;" src="@GlobalConfig.Url("Content/throbber_12.gif")" />

                <div style="height: 30px;"></div>
                <p class="center">
                    Please wait while @GlobalConfig.AppName connects to your Acumatica instance.
                </p>
            </div>
        </div>
    </div>
</div>

<div data-bind="if: StatusVisible">
    <div class="std-padding">        
        <div data-bind="if: IsConnectionOk">
            <div class="alert alert-primary">
                <strong>Acumatica Connection - Successful</strong>
                - @GlobalConfig.AppName now has access to your Acumatica instance
                and can begin reading data.
            </div>
        </div>
        
        <div data-bind="if: IsConnectionBroken">
            <div class="alert alert-danger">
                <strong>Acumatica Connection - Broken</strong>
                - Something is wrong with your Acumatica Connection.
                Try re-connecting or possibly changing your credentials.
            </div>
        </div>

        <div class="card text-center">
            <div class="card-body" style="text-align: left;">
                <div class="form-group">
                    <label for="instanceUrl">Acumatica Instance URL</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaInstanceUrl" />
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Company</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaCompany" />
                </div>

                <div class="form-group">
                    <label for="branch">Acumatica Branch</label>

                    <input type="url"
                           class="form-control"
                           disabled="disabled"
                           data-bind="value: AcumaticaBranch" />
                </div>

                <div data-bind="if: HasConnectionBeenSet"
                     style="text-align: center; width: 100%; margin-bottom: 15px;">
                    <a href="#" class="btn btn-light btn-sm"
                       data-bind="click: ChangeSettingsClick">
                        Change your Acumatica Credentials  <i class="fas fa-pencil-alt"></i>
                    </a>
                    <hr />
                </div>

                <div class="center std-padding">
                    <span data-bind="if: IsPrevButtonVisible">
                        <a href="@GlobalConfig.Url("ShopifyAuth/Domain")"
                           class="btn btn-secondary btn-lg">
                            Previous Step <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <span data-bind="if: IsReturnButtonVisible">
                        <a href="@GlobalConfig.Url("Config/RealTime")"
                           class="btn btn-secondary btn-lg">
                            Back to Dashboard <i class="fas fa-undo"></i>
                        </a>
                    </span>

                    <span data-bind="if: HasConnectionBeenSet">
                        <a href="#" class="btn btn-primary btn-lg"
                           data-bind="click: AcumaticaTestConnection">
                            Re-connect to Acumatica <i class="fas fa-bolt"></i>
                        </a>
                    </span>

                    <span data-bind="ifnot: HasConnectionBeenSet">
                        <a href="#" class="btn btn-primary btn-lg"
                           data-bind="click: ChangeSettingsClick">
                            Enter Credentials <i class="fas fa-pencil-alt"></i>
                        </a>
                    </span>

                    <span data-bind="if: IsNextButtonVisible">
                        <a href="@GlobalConfig.Url("Config/AcumaticaRefData")"
                           class="btn btn-success btn-lg">
                            Next Step <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var Monster = Monster || {};

    Monster.AcumaticaConnectionModel = function() {
        var self = this;

        // View visibility
        self.DataEntryVisible = ko.observable();
        self.BackgroundJobRunning = ko.observable();
        self.StatusVisible = ko.observable();

        self.ClearVisibility = function() {
            self.DataEntryVisible(false);
            self.BackgroundJobRunning(false);
            self.StatusVisible(false);
        };


        // System State
        self.ConnectionState = ko.observable();
        self.IsUrlFinalized = ko.observable();
        self.IsRandomAccessMode = ko.observable();


        self.HasConnectionBeenSet = ko.computed(function() {
            return self.ConnectionState() != SystemState.None;
        });

        self.IsConnectionOk = ko.computed(function() {
            return self.ConnectionState() == SystemState.Ok;
        });

        self.IsConnectionBroken = ko.computed(function() {
            return self.ConnectionState() == SystemState.SystemFault 
                || self.ConnectionState() == SystemState.Invalid;
        });


        // Control-visibility
        self.IsNextButtonVisible = ko.computed(function() {
            return !self.IsRandomAccessMode() && self.IsConnectionOk();
        });

        self.IsPrevButtonVisible = ko.computed(function() {
            return !self.IsRandomAccessMode();
        });

        self.IsBackToDashboardButtonVisible = ko.computed(function() {
            return self.IsRandomAccessMode();
        });

        self.IsReturnButtonVisible = ko.computed(function() {
            return self.IsRandomAccessMode();
        });

        self.IsCancelButtonVisible = ko.computed(function() {
            return self.HasConnectionBeenSet();
        });




        // Data-entry State
        self.AcumaticaInstanceUrl = ko.observable();
        self.AcumaticaCompany = ko.observable();
        self.AcumaticaBranch = ko.observable();
        self.AcumaticaUserName = ko.observable();
        self.AcumaticaPassword = ko.observable();


        // Actions
        self.ChangeSettingsClick = function () {

            self.ClearVisibility();
            @{
                // Debugging stuff - fast and easy - my way!
                if (GlobalConfig.DebugMode)
                {
                    <text>
                        self.AcumaticaInstanceUrl("http://localhost/AcuInst4");
                        self.AcumaticaCompany("MYCOMPANY");
                        self.AcumaticaBranch("MYCOMPANY");
                        self.AcumaticaUserName("admin");
                        self.AcumaticaPassword("l0c4lInstance");
                    </text>
                }
            }
            self.DataEntryVisible(true);
        };

        self.ShowStatusPanel = function() {
            flow.exec(
                function() {
                    self.ClearVisibility();
                    self.StatusVisible(true);

                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/AcumaticaCredentials", this);
                }, 
                function(response) {
                    self.AcumaticaInstanceUrl(response.InstanceUrl);
                    self.AcumaticaCompany(response.Company);
                    self.AcumaticaBranch(response.Branch);
                });
        }

        self.PushCredentials = function() {
            var model = {
                InstanceUrl: self.AcumaticaInstanceUrl(),
                Company: self.AcumaticaCompany(),
                Branch: self.AcumaticaBranch(),
                UserName: self.AcumaticaUserName(),
                Password: self.AcumaticaPassword()
            };

            var ajax = new Monster.Ajax();
            ajax.HttpPost("Config/AcumaticaCredentials", model, self.PollStatus);
        };

        self.AcumaticaTestConnection = function() {
            var ajax = new Monster.Ajax();
            ajax.HttpPost("Config/AcumaticaTestConnection", {}, self.PollStatus);
        };


        self.PollStatus = function() {
            var ajax = new Monster.Ajax();
            ajax.DisablePopupsAndSpinners();
            ajax.HttpGet("Config/AcumaticaConnectionStatus", self.ProcessStatus);
        };

        self.ProcessStatus = function(response) {
            self.ClearVisibility();

            // If still running, then show AJAX...
            if (response.IsBackgroundJobRunning) {
                self.BackgroundJobRunning(true);
                setTimeout(self.PollStatus, 1000);
                return;
            }

            // Else process System State info
            self.ConnectionState(response.ConnectionState);
            self.IsUrlFinalized(response.IsUrlFinalized);
            self.IsRandomAccessMode(response.IsRandomAccessMode);

            if (self.ConnectionState() == SystemState.None) {
                self.ChangeSettingsClick();
            } else {
                self.ShowStatusPanel();
            }
        };

        self.FetchStatus = function() {
            flow.exec(function () {
                    var ajax = new Monster.Ajax();                                        
                    ajax.HttpGet("Config/AcumaticaConnectionStatus", this);
                },
                function (response) {
                    self.AcumaticaInstanceUrl(response.AcumaticaInstanceUrl);
                    self.AcumaticaBranch(response.AcumaticaBranch);
                    self.AcumaticaCompany(response.AcumaticaCompany);
                });
        };

        self.Initialize = function() {
            self.ClearVisibility();
            self.PollStatus();
        };
        
        return self;
    };

    var model = new Monster.AcumaticaConnectionModel();
    model.Initialize();
    ko.applyBindings(model);
</script>

