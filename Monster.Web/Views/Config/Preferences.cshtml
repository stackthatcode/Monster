@using Monster.Web.Plumbing

<style>
    .form-group label { font-weight: 700; }
    #preferences .form-group { height: 120px; }
</style>

<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")

    <hr />
    <h1 class="mt-4 center">Configuration - Preferences</h1>
    <p class="lead center">
        Choose settings to enable @GlobalConfig.AppName to properly synchronize
    </p>

    <div data-bind="ifnot: IsRandomAccessMode">
        <p>
            The next step in configuration is to set your Preferences.
            When @GlobalConfig.AppName is running in Real-Time Sync Mode, it
            will produce a large volume of work. It is critical that you make
            sure your Preferences match your business objectives.
        </p>
    </div>

    <div data-bind="template: { name: 'Preferences-Editor', afterRender: InitializePreferencesEditor }">
    </div>
</main>


<script type="text/html" id="Preferences-Editor">
<div data-bind="if: ShowRefDataErrorMessage">
        <div class="std-pad">
            <div class="alert alert-danger">
                <strong>Acumatica Reference Data Pull - Broken</strong>
                <br />
                There's something wrong with your Acumatica reference data.
            </div>

            <p>
                Before setting preferences, your Acumatica reference data
                needs to be properly configured.
                You can address that now by
                <a href="@GlobalConfig.Url("Config/AcumaticaRefData")"><strong>clicking here</strong></a>.
            </p>
        </div>
    </div>

    <div data-bind="if: ShowDataEntry">
        <div class="card text-center">
            <div id="preferences" class="card-body left">
                <!-- Time Zone -->
                <div class="form-group">
                    <label for="timeZone">Acumatica Instance Time Zone</label>

                    <select id="timeZone" class="form-control"
                            data-bind="value: SelectedTimeZone,
                                    options: TimeZones,
                                    optionsText: 'Name',
                                    value: SelectedTimeZone,
                                    optionsCaption: 'Choose...'"></select>

                    <small id="timeZoneHelp" class="form-text text-muted">
                        In order to synchronize properly, @GlobalConfig.AppName
                        needs to translate between time zones properly
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !TimeZoneValid()">
                        Please select the right Time Zone for your Acumatica Instance
                    </div>
                </div>

                <!-- Item Class -->
                <div class="form-group">
                    <label for="itemClass">Acumatica Default Item Class</label>

                    <select class="form-control"
                            id="itemClass"
                            data-bind="optionsCaption: 'Choose...',
                                    value: SelectedItemClass,
                                    options: ItemClasses,
                                    optionsText: 'ItemClass'"></select>

                    <small id="itemClassHelp" class="form-text text-muted">
                        @GlobalConfig.AppName will use this selection
                        when it creates Stock Items from Shopify Products
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !ItemClassValid()">
                        Please select an Item Class with a valid Posting Class and Default Warehouse
                    </div>
                </div>

                <!-- Posting Class -->
                <div class="form-group">
                    <label for="postingClass">Acumatica Default Posting Class</label>

                    <div data-bind="ifnot: SelectedPostingClass">
                        <input type="text"
                               id="postingClass"
                               class="form-control"
                               disabled="disabled"
                               value="(Select an Item Class that has a Posting Class)" />
                    </div>

                    <div data-bind="if: SelectedPostingClass">
                        <input type="text"
                               id="postingClass"
                               class="form-control"
                               disabled="disabled"
                               data-bind="value: SelectedPostingClass" />
                    </div>

                    <small id="postingClassHelp" class="form-text text-muted">
                        @GlobalConfig.AppName will use this selection
                        when it creates Stock Items from Shopify Products
                    </small>
                </div>

                <!-- Tax Zone -->
                <div class="form-group">
                    <label for="taxZone">Acumatica Tax Zone</label>

                    <select class="form-control" id="taxZone"
                            data-bind="optionsCaption: 'Choose...',
                                        value: SelectedTaxZone,
                                        options: TaxZones"></select>

                    <small id="taxZoneHelp"
                           class="form-text text-muted">
                        @GlobalConfig.AppName uses this selection for sales tax
                        in Sales Orders and Credit Memos.
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !SelectedTaxZone()">
                        Please select a Tax Zone
                    </div>
                </div>

                <!-- Tax Category -->
                <div class="form-group">
                    <label for="taxCategory">Acumatica Tax Category</label>

                    <select class="form-control" id="taxCategory"
                            data-bind="optionsCaption: 'Choose...',
                                        value: SelectedTaxCategory,
                                        options: TaxCategories"></select>

                    <small id="taxCategoryHelp"
                           class="form-text text-muted">
                        @GlobalConfig.AppName uses this selection for sales tax
                        in Sales Orders and Credit Memos.
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !SelectedTaxCategory()">
                        Please select a Tax Category
                    </div>
                </div>

                <!-- Tax ID -->
                <div class="form-group">
                    <label for="taxId">Acumatica Tax ID</label>

                    <select class="form-control" id="taxId"
                            data-bind="optionsCaption: 'Choose...',
                                        value: SelectedTaxId,
                                        options: TaxIds"></select>

                    <small id="taxIdHelp"
                           class="form-text text-muted">
                        @GlobalConfig.AppName uses this selection for sales tax
                        in Sales Orders and Credit Memos.
                    </small>

                    <div class="error-message"
                         data-bind="if: ShowValidation() && !SelectedTaxId()">
                        Please select a Tax ID
                    </div>
                </div>
            </div>

            <div class="card-footer text-muted">
                @GlobalConfig.AppName Preferences Editor
            </div>
        </div>

        <div style="height:45px;"
             data-bind="if: ShowErrorSummary" class="center error-message">
            One or more items are not valid. Please review and correct.
        </div>
    </div>

    <div class="std-pad-b center">
        <div data-bind="ifnot: IsRandomAccessMode">
            <a href="@GlobalConfig.Url("Config/AcumaticaRefData")"
               class="btn btn-secondary btn-lg">
                <i class="fas fa-undo"></i> Previous Step
            </a>

            <a href="#" data-bind="click: GotoNextStepClick"
               class="btn btn-success btn-lg">
                Next Step <i class="fas fa-sign-in-alt"></i>
            </a>
        </div>

        <div data-bind="if: IsRandomAccessMode">
            <a href="@GlobalConfig.DiagnosticsHome"
               class="btn btn-secondary btn-lg">
                Back to Diagnostics <i class="fas fa-undo"></i>
            </a>

            <a href="#" class="btn btn-primary btn-lg"
               data-bind="click: SaveChangesClick">
                Save Changes <i class="fas fa-bolt"></i>
            </a>
        </div>
    </div>
</script>

<script>
    var Monster = Monster || {};

    Monster.PreferencesModel = function () {
        var self = this;

        self.ShowRefDataErrorMessage = ko.observable(false);
        self.ShowDataEntry = ko.observable(false);
        self.IsRandomAccessMode = ko.observable();

        // Reference data
        self.TimeZones = ko.observableArray();
        self.ItemClasses = ko.observableArray();
        self.TaxIds = ko.observableArray();
        self.TaxCategories = ko.observableArray();
        self.TaxZones = ko.observableArray();

        // Selected options
        self.SelectedTimeZone = ko.observable();
        self.SelectedItemClass = ko.observable();
        self.SelectedTaxId = ko.observable();
        self.SelectedTaxCategory = ko.observable();
        self.SelectedTaxZone = ko.observable();

        self.SelectedPostingClass = ko.computed(function() {
            return self.SelectedItemClass()
                    ? self.SelectedItemClass().PostingClass : null;
        });

    
        // Validation
        self.TimeZoneValid = ko.computed(function () {
            return self.SelectedTimeZone();
        });

        self.ItemClassValid = ko.computed(function () {
            return self.SelectedItemClass() && self.SelectedPostingClass();
        });

        self.IsValid = ko.computed(function() {
            return self.TimeZoneValid()
                && self.ItemClassValid()
                && self.SelectedTaxId()
                && self.SelectedTaxCategory()
                && self.SelectedTaxZone();
        });

        self.ShowValidation = ko.observable(false);

        self.ShowErrorSummary = ko.computed(function () {
            return self.ShowValidation() && !self.IsValid();
        });


        // Initialization stuff
        self.InitializePreferencesEditor = function() {
            $('#datepicker').datepicker({
                uiLibrary: 'bootstrap4'
            });
        };

        self.Initialize = function () {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/AcumaticaRefDataStatus", this);
                },
                function (response) {
                    self.IsRandomAccessMode(response.IsRandomAccessMode);

                    if (response.IsBroken) {
                        self.ShowRefDataErrorMessage(true);
                        return;
                    }

                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/AcumaticaReferenceData", this);
                },
                function (response) {
                    //console.log(response);

                    self.TimeZones(response.TimeZones);
                    self.ItemClasses(response.ItemClasses);
                    self.TaxIds(response.TaxIds);
                    self.TaxCategories(response.TaxCategories);
                    self.TaxZones(response.TaxZones);

                    self.ShowDataEntry(true);
                    self.InitializePreferencesEditor();

                    // Pull selections
                    var ajax = new Monster.Ajax();
                    ajax.HttpGet("Config/PreferenceSelections", this);
                },
                function (response) {

                    self.SelectedTaxId(response.AcumaticaTaxId);
                    self.SelectedTaxCategory(response.AcumaticaTaxCategory);
                    self.SelectedTaxZone(response.AcumaticaTaxZone);

                    var itemClass =
                        Monster.FindByField(
                            self.ItemClasses(), 'ItemClass', response.AcumaticaDefaultItemClass);

                    self.SelectedItemClass(itemClass);

                    var timeZone =
                        Monster.FindByField(
                            self.TimeZones(), 'TimeZoneId', response.AcumaticaTimeZone);

                    self.SelectedTimeZone(timeZone);
                });
        };

        self.SaveChangesClick = function () {
            self.SaveChanges();
        }

        self.SaveChanges = function (callback) {
            flow.exec(function() {
                self.ShowValidation(true);
                if (!self.IsValid()) {
                    return;
                }

                var model = {};

                model.AcumaticaTimeZone = self.SelectedTimeZone().TimeZoneId;
                model.AcumaticaDefaultItemClass = self.SelectedItemClass().ItemClass;
                model.AcumaticaDefaultPostingClass = self.SelectedPostingClass();

                model.AcumaticaTaxZone = self.SelectedTaxZone();
                model.AcumaticaTaxId = self.SelectedTaxId();
                model.AcumaticaTaxCategory = self.SelectedTaxCategory();

                var ajax = new Monster.Ajax();
                ajax.HttpPost("Config/PreferenceSelections", model, this);
            },
            function() {
                if (callback) {
                    callback();
                }
            });
        }

        self.GotoNextStepClick = function() {
            self.SaveChanges(
                function () {
                    if (!self.IsValid()) {
                        return;
                    }

                    window.location.href = '@GlobalConfig.Url("Config/PaymentMethods")';
                });
            };

        return self;
    };

    var model = new Monster.PreferencesModel();
    model.Initialize();
    ko.applyBindings(model);
</script>

