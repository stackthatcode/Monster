@using Monster.Web.Plumbing

<style>
    .container {
        width: auto;
        max-width: 860px;
        padding: 0 15px;
    }
    .sync-label {
        display:inline-block; 
        font-weight:500; 
        color:#999999;
    }
    .sync-setting {
        display:inline-block;
        text-align: left;
        font-weight: 700;
        color:#777777;
    }
</style>


<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")
    <hr />

    <div>
        <h1 class="mt-4 center">@GlobalConfig.AppName End-to-End Synchronization</h1>
        <p class="lead center">
            Synchronization of Orders, Customers, Shipments, Inventory and Refunds
        </p>
    </div>

    <div class="std-pad-b">
        <div class="card">
            <div class="card-body center">
                <div data-bind="if: AreAnyJobsRunning">
                    <div data-bind="template: { name: 'Running-State' }"></div>
                </div>
                
                <div data-bind="ifnot: AreAnyJobsRunning">
                    <div data-bind="template: { name: 'Non-Running-State' }"></div>
                </div>
            </div>
        </div>
    </div>
    
    <div data-bind="template: { name: 'Order-Sync-Settings', data: OrderSyncSettingsPopupModel }"></div>
</main>

<script type="text/html" id="Running-State">
    <div data-bind="if: IsRealTimeSyncRunning">
        <div class="alert alert-success">
            <strong>Real-Time Synchronization - Enabled</strong>
        </div>
    </div>
    <div data-bind="ifnot: IsRealTimeSyncRunning">
        <div class="alert alert-secondary">
            <strong>Real-Time Synchronization - Disabled</strong>
        </div>
    </div>

    <div style="text-align: center;" class="std-pad-sm">
        <div data-bind="template: { name: 'Job-Running-Spinner' }"></div>
    </div>

    <hr/>

    <div data-bind="if: IsKillRealTimeButtonEnabled">
        <a href="#" data-bind="click: PauseRealTimeClick"
           class="btn btn-primary btn-lg">
            Pause Real-Time Sync <i class="fas fa-bolt"></i>
        </a>
    </div>

    <div data-bind="ifnot: IsKillRealTimeButtonEnabled">
        <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
            Pause Real-Time Sync <i class="fas fa-bolt"></i>
        </button>
    </div>
                    
    <div style="height: 15px;"></div>

    <div data-bind="template: { name: 'Execution-Log-Ticker', data: JobRunningModel }"></div>
</script>

<script type="text/html" id="Non-Running-State">
    <div data-bind="if: ShowRealTimeDiagnosticsOk">
        <div class="alert alert-info">
            <strong>End-to-End Synchronization - Diagnostics OK</strong>
        </div>
    </div>

    <div data-bind="ifnot: ShowRealTimeDiagnosticsOk">
        <div class="alert alert-danger">
            <strong>End-to-End Synchronization - Disabled</strong>
        </div>

        <p>
            Something is wrong with your current @GlobalConfig.AppName configuration. You'll need to run
            <a href="@GlobalConfig.Url("Config/Diagnostics")">Configuration Diagnostics</a>
            to identify and correct the issue.
        </p>
    </div>

    <div style="height: 15px;"></div>

    <div class="center">
        <span data-bind="ifnot: IsCompleteSyncButtonEnabled">
            <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                Run One-Time Sync <i class="fas fa-times"></i>
            </button>

            <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                Start Real-Time Sync <i class="fas fa-times"></i>
            </button>
        </span>

        <span data-bind="if: IsCompleteSyncButtonEnabled">
            <a href="#" data-bind="click: StartRealTimeClick" class="btn btn-primary btn-lg">
                Run One-Time Sync <i class="fas fa-bolt"></i>
            </a>

            <a href="#" data-bind="click: StartRealTimeClick" class="btn btn-primary btn-lg">
                Start Real-Time Sync <i class="fas fa-bolt"></i>
            </a>
        </span>
    </div>

    <div style="height: 15px;"></div>
    
    <div style="font-size:0.9em; color:#999999; font-weight:500; text-align:center; padding:15px; letter-spacing: 5px; text-transform: uppercase;">
        Sync Preferences
    </div>
    
    <div data-bind="template: { name: 'Sync-Settings', data: SyncSettingsModel }"></div>
</script>

<script type="text/html" id="Sync-Settings">    
    <table class="table" style="max-width: 550px; margin-left: auto; margin-right: auto;">
        <tbody>
        <tr>
            <td>
                <div style="clear:both; vertical-align: middle;" 
                     data-bind="template: { name: 'Sync-Enable-Item', data: OrderSyncEnable }">
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div style="float:left;">
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Starting Order Date</span>                
                        <span class="sync-setting">3/6/2019</span>
                    </div>
                    
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Starting Order Number</span>                
                        <span class="sync-setting">1023</span>                        
                    </div>
                    
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Max Parallel Syncs</span>                
                        <span class="sync-setting">8</span>
                    </div>
                </div>
                
                <div style="float:right; padding-top:15px;">
                    <a href="#" class="btn btn-primary btn-sm" 
                       data-bind="click: EditOrderSettingsClick"
                       style="padding-top:8px; padding-bottom: 8px;">
                        EDIT SETTINGS <i class="fa fa-pencil-alt"></i>
                    </a>
                </div>
            </td>
        </tr>
        
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: InventorySyncEnable }">
            </td>
        </tr>
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: ShipmentSyncEnable }">
            </td>
        </tr>
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: RefundSyncEnable }">
            </td>
        </tr>
        </tbody>
    </table>
</script>

<script type="text/html" id="Sync-Enable-Item">
    <div class="sync-label" style="margin-top:10px; float:left;" data-bind="text: Label"></div>
                
    <!-- Rounded switch -->
    <div style="text-align:center; float:right; width:70px;">
        <label class="switch" style="margin-bottom: 0;">
            <input type="checkbox" 
                   data-bind="checked: IsEnabled, click: Clicked">
            <span class="slider round"></span>
        </label>
        <div data-bind="if: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#007bff">ENABLED</span>
        </div>
        <div data-bind="ifnot: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#a9a9a9">DISABLED</span>
        </div>
    </div>
</script>

<script id="Order-Sync-Settings" type="text/html">
    <div class="modal fade" id="order-sync-settings-modal" tabindex="-1" 
         role="dialog" aria-labelledby="order-sync-settings-modal" aria-hidden="true">

        <div class="modal-dialog" role="document" style="max-width:600px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="order-sync-settings-modalLabel">Enter Order Sync Settings</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body left">
                    <div class="form-group">
                        <label for="datepicker">Starting Date for Shopify Orders</label>

                        <input id="datepicker"
                               type="text"
                               class="form-control"
                               placeholder="Choose..."
                               data-bind="value: SelectedStartingDate" />

                        <small id="datepickerHelp" class="form-text text-muted">
                            @GlobalConfig.AppName will only load Shopify Orders
                            that are created on or after this date into Acumatica.
                        </small>
                    </div>

                    <div class="form-group">
                        <label for="orderNumber">
                            Starting Shopify Order Number
                            <span style="font-weight:400;">(OPTIONAL)</span>
                        </label>

                        <input id="orderNumber"
                               class="form-control"
                               placeholder="Enter a Shopify Order Number..."
                               maxlength="12"
                               data-bind="value: ShopifyOrderNumberStart,
                                    event: { blur: ShopifyOrderNumberStartBlur }" />

                        <small id="orderNumberHelp" class="form-text text-muted">
                            @GlobalConfig.AppName will only load Shopify Orders
                            with an Order Number equal to or greater than this.
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="orderNumber">
                            Maximum # of Parallel Syncs to Acumatica
                        </label>
                        <select  class="form-control" data-bind="value: MaxParallelSyncs">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                        </select>
                        
                        <small id="orderNumberHelp" class="form-text text-muted">
                            @GlobalConfig.AppName will run up to this many syncs to Acumatica at the same time.
                            <div style="font-weight:700;">WARNING - be sure confirm that you have enough Acumatica licenses </div>
                        </small>
                    </div>
                </div>
                <div style="height:45px;"
                     data-bind="if: ShowValidation() && !StartingDateValid()" class="center error-message">
                    One or more items are not valid. Please review and correct.
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Cancel <i class="fas fa-times"></i>
                    </button>
                    <button type="button" data-bind="click: SaveSettings" class="btn btn-primary">
                        Save <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</script>


<script>
    var Monster = Monster || {};

    Monster.SyncEnabledModel = function(label) {
        var self = this;

        self.IsEnabled = ko.observable(true);

        self.Clicked = function () {
            //alert('Ok Sync State Changed!');
            return true;
        };

        self.Set = function(enabled) {
            self.IsEnabled(enabled);
        }

        self.Label = ko.observable(label);

        return self;
    };

    Monster.OrderSyncSettingsPopupModel = function() {
        var self = this;

        self.ShopifyOrderNumberStart = ko.observable();
        self.SelectedStartingDate = ko.observable();
        self.MaxParallelSyncs = ko.observable(4);

        self.ShowValidation = ko.observable(false);
        
        self.StartingDateValid = ko.computed(function() {
            return Monster.IsDate(self.SelectedStartingDate());
        });

        self.SaveSettings = function() {
            self.ShowValidation(true);
        };
        
        self.ShopifyOrderNumberStartBlur = function () {
            if (Number.isInteger(parseInt(self.ShopifyOrderNumberStart()))) {
                self.ShopifyOrderNumberStart(parseInt(self.ShopifyOrderNumberStart()));
            } else {
                self.ShopifyOrderNumberStart(null);
            }
        };
        
        self.ShopifyOrderNumberStart.subscribe(function () {
            self.ShopifyOrderNumberStartBlur();
        });

        self.Launch = function() {
            $("#order-sync-settings-modal").modal('show');
        };

        Monster.Events.subscribe("/LaunchOrderSyncSettings", self.Launch);

        return self;
    };

    Monster.SyncSettingsModel = function () {
        var self = this;

        self.InventorySyncEnable = new Monster.SyncEnabledModel("Inventory Synchronization");
        self.OrderSyncEnable = new Monster.SyncEnabledModel("Order Synchronization");
        self.ShipmentSyncEnable = new Monster.SyncEnabledModel("Shipment Synchronization");
        self.RefundSyncEnable = new Monster.SyncEnabledModel("Refund Synchronization");

        self.ShopifyOrderDateStartFormatted = ko.observable();
        self.ShopifyOrderNumberStartFormatted = ko.observable();
        self.MaxParallelAcumaticaSyncs = ko.observable();

        self.EditOrderSettingsClick = function () {
            Monster.Events.publish("/LaunchOrderSyncSettings");
        };

        self.Refresh = function() {
            flow.exec(function() {
                    var ajax = new Monster.Ajax();
                    ajax.DisablePopupsAndSpinners();
                    ajax.HttpGet("RealTime/SyncSettingsAndEnables", this);
                },
                function (response) {
                    var settings = response.OrderSyncSettingsModel;
                    self.ShopifyOrderDateStartFormatted(settings.ShopifyOrderDateStartFormatted);
                    self.ShopifyOrderNumberStartFormatted(settings.ShopifyOrderNumberStartFormatted);
                    self.MaxParallelAcumaticaSyncs(settings.ShopifyOrderDateStartFormatted);

                    var enables = response.SyncEnablesModel;
                    self.InventorySyncEnable.Set(enables.InventorySyncEnable);
                    self.OrderSyncEnable.Set(enables.OrderSyncEnable);
                    self.ShipmentSyncEnable.Set(enables.ShipmentSyncEnable);
                    self.RefundSyncEnable.Set(enables.RefundSyncEnable);                    
                });
        };

        return self;
    };

    Monster.RealTimeModel = function () {
        var self = this;

        self.AreAnyJobsRunning = ko.observable(false);
        self.IsRealTimeSyncRunning = ko.observable(false);
        self.IsConfigReadyForRealTime = ko.observable(false);

        self.JobRunningModel = new Monster.ExecutionLogModel();
        self.OrderSyncSettingsPopupModel = new Monster.OrderSyncSettingsPopupModel();
        self.SyncSettingsModel = new Monster.SyncSettingsModel();
        
        // Computed properties
        //
        self.IsCompleteSyncButtonEnabled = ko.computed(function () {
            return !self.AreAnyJobsRunning() && self.IsConfigReadyForRealTime();
        });

        self.IsKillRealTimeButtonEnabled = ko.computed(function() {
            return self.IsRealTimeSyncRunning();
        });

        self.ShowRealTimeDiagnosticsOk = ko.computed(function() {
            return self.IsConfigReadyForRealTime();
        });

    
        // Polling Function
        self.PollStatus = function() {
            flow.exec(function() {
                    var ajax = new Monster.Ajax();
                    ajax.DisablePopupsAndSpinners();
                    ajax.HttpGet("RealTime/RealTimeStatus", this);
                },
                function (response) {
                    //console.log(response);

                    self.AreAnyJobsRunning(response.AreAnyJobsRunning);
                    self.IsRealTimeSyncRunning(response.IsRealTimeSyncRunning);
                    self.IsConfigReadyForRealTime(response.IsConfigReadyForRealTime);
                    self.JobRunningModel.Ingest(response.Logs);

                    if (self.AreAnyJobsRunning()) {
                        setTimeout(self.PollStatus, 1000);
                    } else {
                        self.SyncSettingsModel.Refresh();
                    }
                });
        };


        self.StartRealTimeClick = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("RealTime/StartRealTime", {}, this);
                },
                function(response) {
                    self.PollStatus();
                });
        };

        self.PauseRealTimeClick = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("RealTime/PauseRealTime", {}, this);
                },
                function(response) {
                });
        };
    
        self.Initialize = function() {
            self.PollStatus();
            $('#datepicker').datepicker({
                uiLibrary: 'bootstrap4'
            });
        };

        return self;
    };

    var model = new Monster.RealTimeModel();
    model.Initialize();
    ko.applyBindings(model);
    model.Initialize();
</script>
