@using Monster.Web.Plumbing

<style>
    .container {
        width: auto;
        max-width: 860px;
        padding: 0 15px;
    }
    .diagnosis-item .badge {
        padding: 8px;
    }
    .not-synced {
        background-color: #fff3cd
    }
    .synced {
        background-color: #d4edda;
    }
    .sync-label {
        display:inline-block; 
        font-weight:700; 
        color:#777777;
    }
    .sync-setting {
        display:inline-block;
        text-align: left;
    }
</style>


<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")
    <hr />

    <div>
        <h1 class="mt-4 center">@GlobalConfig.AppName Complete Synchronization</h1>
        <p class="lead center">
            Synchronization of Orders, Customers, Shipments, Inventory and Refunds
        </p>
    </div>

    <div class="std-pad-b">
        <div class="card">
            <div class="card-body center">
                <div data-bind="if: AreAnyJobsRunning">
                    <div data-bind="template: { name: 'Running-State' }"></div>
                </div>
                
                <div data-bind="ifnot: AreAnyJobsRunning">
                    <div data-bind="template: { name: 'Non-Running-State' }"></div>
                </div>
            </div>
        </div>
    </div>
</main>

<script type="text/html" id="Running-State">
    <div data-bind="if: IsRealTimeSyncRunning">
        <div class="alert alert-success">
            <strong>Real-Time Synchronization - Enabled</strong>
        </div>
    </div>
    <div data-bind="ifnot: IsRealTimeSyncRunning">
        <div class="alert alert-secondary">
            <strong>Real-Time Synchronization - Disabled</strong>
        </div>
    </div>

    <div style="text-align: center;" class="std-pad-sm">
        <div data-bind="template: { name: 'Job-Running-Spinner' }"></div>
    </div>

    <hr/>

    <div data-bind="if: IsKillRealTimeButtonEnabled">
        <a href="#" data-bind="click: PauseRealTimeClick"
           class="btn btn-primary btn-lg">
            Pause Real-Time Sync <i class="fas fa-bolt"></i>
        </a>
    </div>

    <div data-bind="ifnot: IsKillRealTimeButtonEnabled">
        <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
            Pause Real-Time Sync <i class="fas fa-bolt"></i>
        </button>
    </div>
                    
    <div style="height: 15px;"></div>

    <div data-bind="template: { name: 'Execution-Log-Ticker', data: JobRunningModel }"></div>
</script>

<script type="text/html" id="Non-Running-State">
    <div data-bind="if: ShowRealTimeDiagnosticsOk">
        <div class="alert alert-info">
            <strong>Real-Time Synchronization - Diagnostics OK</strong>
        </div>
    </div>

    <div data-bind="ifnot: ShowRealTimeDiagnosticsOk">
        <div class="alert alert-danger">
            <strong>Real-Time Synchronization - Disabled</strong>
        </div>

        <p>
            Something is wrong with your current @GlobalConfig.AppName configuration. You'll need to run
            <a href="@GlobalConfig.Url("Config/Diagnostics")">Configuration Diagnostics</a>
            to identify and correct the issue.
        </p>
    </div>

    <div style="height: 15px;"></div>

    <div class="center">
        <span data-bind="ifnot: IsCompleteSyncButtonEnabled">
            <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                Start One-Time Sync <i class="fas fa-times"></i>
            </button>

            <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                Start Real-Time Sync <i class="fas fa-times"></i>
            </button>
        </span>

        <span data-bind="if: IsCompleteSyncButtonEnabled">
            <a href="#" data-bind="click: StartRealTimeClick" class="btn btn-primary btn-lg">
                Start One-Time Sync <i class="fas fa-bolt"></i>
            </a>

            <a href="#" data-bind="click: StartRealTimeClick" class="btn btn-primary btn-lg">
                Start Real-Time Sync <i class="fas fa-bolt"></i>
            </a>
        </span>
    </div>

    <div style="height: 15px;"></div>
    
    <div style="font-size:0.9em; color:#999999; font-weight:700; text-align:center; padding:15px; letter-spacing: 5px; text-transform: uppercase;">
        Sync Preferences
    </div>

    <table class="table" style="max-width: 500px; margin-left: auto; margin-right: auto;">
        <tbody>
        <tr>
            <td>
                <div style="clear:both; vertical-align: middle;" 
                     data-bind="template: { name: 'Sync-Enable-Item', data: OrderSyncEnable }">
                </div>
                <div style="clear:both; height:20px;"></div>
                
                <div style="float:left;">
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Starting Order Date</span>                
                        <span class="sync-setting">3/6/2019</span>
                    </div>
                    
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Starting Order Number</span>                
                        <span class="sync-setting">#1023</span>                        
                    </div>
                    
                    <div style="clear:both; text-align: left;">
                        <span class="sync-label" style="min-width:200px; text-align: left;">Max Parallel Order Syncs</span>                
                        <span class="sync-setting">8</span>
                    </div>
                </div>
                
                <div style="float:right; padding-top:15px;">
                    <a href="#" class="btn btn-primary btn-sm" style="font-size: 0.8em; padding-top:8px; padding-bottom: 8px;">
                        ORDER SETTINGS <i class="fa fa-pencil-alt"></i>
                    </a>
                </div>
            </td>
        </tr>
        
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: InventorySyncEnable }">
            </td>
        </tr>
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: ShipmentSyncEnable }">
            </td>
        </tr>
        <tr>
            <td style="vertical-align: middle;" 
                data-bind="template: { name: 'Sync-Enable-Item', data: RefundSyncEnable }">
            </td>
        </tr>
     </tbody>
    </table>
</script>

<script type="text/html" id="Sync-Enable-Item">
    <div class="sync-label" style="margin-top:10px; float:left;" data-bind="text: Label"></div>
                
    <!-- Rounded switch -->
    <div style="text-align:center; float:right; width:70px;">
        <label class="switch" style="margin-bottom: 0;">
            <input type="checkbox" 
                   data-bind="checked: IsEnabled, click: Clicked">
            <span class="slider round"></span>
        </label>
        <div data-bind="if: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#007bff">ENABLED</span>
        </div>
        <div data-bind="ifnot: IsEnabled">
            <span style="font-size:0.8em; font-weight:700; color:#a9a9a9">DISABLED</span>
        </div>
    </div>

</script>


<script>
    var Monster = Monster || {};

    Monster.SyncEnabledModel = function(label) {
        var self = this;

        self.IsEnabled = ko.observable(true);
        self.Clicked = function() { alert('Ok Sync State Changed!');
            return true;
        };

        self.Set = function(enabled) {
            self.IsEnabled(enabled);
        }

        self.Label = ko.observable(label);

        return self;
    };

    Monster.RealTimeModel = function () {
        var self = this;

        self.AreAnyJobsRunning = ko.observable(false);
        self.IsRealTimeSyncRunning = ko.observable(false);
        self.IsConfigReadyForRealTime = ko.observable(false);

        self.JobRunningModel = new Monster.ExecutionLogModel();

        // Computed properties
        //
        self.IsCompleteSyncButtonEnabled = ko.computed(function () {
            return !self.AreAnyJobsRunning() && self.IsConfigReadyForRealTime();
        });

        self.IsKillRealTimeButtonEnabled = ko.computed(function() {
            return self.IsRealTimeSyncRunning();
        });

        self.ShowRealTimeDiagnosticsOk = ko.computed(function() {
            return self.IsConfigReadyForRealTime();
        });

        // Synchronization Enabled/Disable state models
        self.InventorySyncEnable = new Monster.SyncEnabledModel("Inventory Synchronization");
        self.OrderSyncEnable = new Monster.SyncEnabledModel("Order Synchronization");
        self.ShipmentSyncEnable = new Monster.SyncEnabledModel("Shipment Synchronization");
        self.RefundSyncEnable = new Monster.SyncEnabledModel("Refund Synchronization");

    
        // Polling Function
        self.PollStatus = function() {
            flow.exec(function() {
                    var ajax = new Monster.Ajax();
                    ajax.DisablePopupsAndSpinners();
                    ajax.HttpGet("RealTime/RealTimeStatus", this);
                },
                function (response) {
                    //console.log(response);

                    self.AreAnyJobsRunning(response.AreAnyJobsRunning);
                    self.IsRealTimeSyncRunning(response.IsRealTimeSyncRunning);
                    self.IsConfigReadyForRealTime(response.IsConfigReadyForRealTime);

                    self.JobRunningModel.Ingest(response.Logs);

                    setTimeout(self.PollStatus, 1000);
                });
        };
    
        self.StartRealTimeClick = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("RealTime/StartRealTime", {}, this);
                },
                function(response) {
                    self.PollStatus();
                });
        };

        self.PauseRealTimeClick = function() {
            flow.exec(
                function() {
                    var ajax = new Monster.Ajax();
                    ajax.HttpPost("RealTime/PauseRealTime", {}, this);
                },
                function(response) {
                });
        };
    
        self.Initialize = function() {
            self.PollStatus();
        };

        return self;
    };

    var model = new Monster.RealTimeModel();
    model.Initialize();
    ko.applyBindings(model);
    model.Initialize();
</script>
