@using Monster.Web.Plumbing


<style>
    .container {
        width: auto;
        max-width: 860px;
        padding: 0 15px;
    }
    .diagnosis-item .badge {
        padding: 8px;
    }
    .not-synced {
        background-color: #fff3cd
    }
    .synced {
        background-color: #d4edda;
    }
</style>


<main role="main" class="medium-size">
    @Html.Partial("_TopBrand")
    <hr />

    <div>
        <h1 class="mt-4 center">@GlobalConfig.AppName Real-Time Synchronization</h1>
        <p class="lead center">
            Active Synchronization between Shopify and Acumatica
        </p>
    </div>

    <div class="std-pad-b">
        <div class="card">
            <div class="card-body center">
                <div data-bind="if: AreAnyJobsRunning">
                    <div data-bind="if: IsRealTimeSyncRunning">
                        <div class="alert alert-success">
                            <strong>Real-Time Synchronization - Enabled</strong>
                        </div>
                    </div>
                    <div data-bind="ifnot: IsRealTimeSyncRunning">
                        <div class="alert alert-secondary">
                            <strong>Real-Time Synchronization - Disabled</strong>
                        </div>
                    </div>

                    <div style="text-align: center;" class="std-pad-sm">
                        <div data-bind="template: { name: 'Job-Running-Spinner' }"></div>
                    </div>

                    <hr/>

                    <div data-bind="if: IsKillRealTimeButtonEnabled">
                        <a href="#" data-bind="click: PauseRealTimeClick"
                           class="btn btn-primary btn-lg">
                            Pause Real-Time Sync <i class="fas fa-bolt"></i>
                        </a>
                    </div>

                    <div data-bind="ifnot: IsKillRealTimeButtonEnabled">
                        <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                            Pause Real-Time Sync <i class="fas fa-bolt"></i>
                        </button>
                    </div>
                </div>

                <div data-bind="ifnot: AreAnyJobsRunning">
                    
                    <div data-bind="if: ShowRealTimeDiagnosticsOk">
                        <div class="alert alert-info">
                            <strong>Real-Time Synchronization - Diagnostics OK</strong>
                        </div>
                    </div>

                    <div data-bind="ifnot: ShowRealTimeDiagnosticsOk">
                        <div class="alert alert-danger">
                            <strong>Real-Time Synchronization - Disabled</strong>
                        </div>

                        <p>
                            Something is wrong with your current @GlobalConfig.AppName configuration. You'll need to run
                            <a href="@GlobalConfig.Url("Config/Diagnostics")">Configuration Diagnostics</a>
                            to identify and correct the issue.
                        </p>
                    </div>

                    <div style="height: 30px;"></div>

                    <div class="center">
                        <span data-bind="ifnot: IsStartRealTimeButtonEnabled">
                            <button type="button" class="btn btn-secondary btn-lg" disable="disabled">
                                Start Real-Time Sync <i class="fas fa-times"></i>
                            </button>
                        </span>

                        <span data-bind="if: IsStartRealTimeButtonEnabled">
                            <a href="#" data-bind="click: StartRealTimeClick" class="btn btn-primary btn-lg">
                                Start Real-Time Sync <i class="fas fa-bolt"></i>
                            </a>
                        </span>
                    </div>
                </div>

                <div style="height: 30px;"></div>
                
                <div data-bind="template: { name: 'Execution-Log-Ticker', data: JobRunningModel }"></div>
            </div>
        </div>
    </div>
</main>


<script>
var Monster = Monster || {};

Monster.RealTimeModel = function() {
    var self = this;

    self.AreAnyJobsRunning = ko.observable(false);
    self.IsRealTimeSyncRunning = ko.observable(false);
    self.IsConfigReadyForRealTime = ko.observable(false);

    self.JobRunningModel = new Monster.JobRunningModel();

    // Computed properties
    //
    self.IsStartRealTimeButtonEnabled = ko.computed(function () {
        return !self.AreAnyJobsRunning() && self.IsConfigReadyForRealTime();
    });

    self.IsKillRealTimeButtonEnabled = ko.computed(function() {
        return self.IsRealTimeSyncRunning();
    });

    self.ShowRealTimeDiagnosticsOk = ko.computed(function() {
        return self.IsConfigReadyForRealTime();
    });



    // Add Polling Function
    self.PollStatus = function() {
        flow.exec(function() {
                var ajax = new Monster.Ajax();
                ajax.DisablePopupsAndSpinners();
                ajax.HttpGet("RealTime/RealTimeStatus", this);
            },
            function (response) {
                //console.log(response);

                self.AreAnyJobsRunning(response.AreAnyJobsRunning);
                self.IsRealTimeSyncRunning(response.IsRealTimeSyncRunning);
                self.IsConfigReadyForRealTime(response.IsConfigReadyForRealTime);

                self.JobRunningModel.Ingest(response.Logs);

                if (self.AreAnyJobsRunning()) {
                    setTimeout(self.PollStatus, 1000);
                }
            });
    };

    
    self.StartRealTimeClick = function() {
        flow.exec(
            function() {
                var ajax = new Monster.Ajax();
                ajax.HttpPost("RealTime/StartRealTime", {}, this);
            },
            function(response) {
                self.PollStatus();
            });
    };

    self.PauseRealTimeClick = function() {
        flow.exec(
            function() {
                var ajax = new Monster.Ajax();
                ajax.HttpPost("RealTime/PauseRealTime", {}, this);
            },
            function(response) {
            });
    };
    
    self.Initialize = function() {
        self.PollStatus();
    };

    return self;
};

var model = new Monster.RealTimeModel();
model.Initialize();
ko.applyBindings(model);
model.Initialize();
</script>
