

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "BundleWizard.Middle\App.config"
//     Connection String Name: "DefaultConnection"
//     Connection String:      "Server=localhost;Database=Bundler;Trusted_Connection=True;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Monster.Middle.EF
{
    using System.Linq;

    #region Unit of work

    public interface IBundleDataContext : System.IDisposable
    {
        System.Data.Entity.DbSet<BundleProduct> BundleProducts { get; set; } // BundleProducts
        System.Data.Entity.DbSet<BundleUnifiedVariant> BundleUnifiedVariants { get; set; } // BundleUnifiedVariants
        System.Data.Entity.DbSet<BundleVariantReference> BundleVariantReferences { get; set; } // BundleVariantReferences
        System.Data.Entity.DbSet<ExclusionConstraint> ExclusionConstraints { get; set; } // ExclusionConstraints
        System.Data.Entity.DbSet<ProductType> ProductTypes { get; set; } // ProductTypes
        System.Data.Entity.DbSet<ProductVariant> ProductVariants { get; set; } // ProductVariants

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleDataContext : System.Data.Entity.DbContext, IBundleDataContext
    {
        public System.Data.Entity.DbSet<BundleProduct> BundleProducts { get; set; } // BundleProducts
        public System.Data.Entity.DbSet<BundleUnifiedVariant> BundleUnifiedVariants { get; set; } // BundleUnifiedVariants
        public System.Data.Entity.DbSet<BundleVariantReference> BundleVariantReferences { get; set; } // BundleVariantReferences
        public System.Data.Entity.DbSet<ExclusionConstraint> ExclusionConstraints { get; set; } // ExclusionConstraints
        public System.Data.Entity.DbSet<ProductType> ProductTypes { get; set; } // ProductTypes
        public System.Data.Entity.DbSet<ProductVariant> ProductVariants { get; set; } // ProductVariants

        static BundleDataContext()
        {
            System.Data.Entity.Database.SetInitializer<BundleDataContext>(null);
        }

        public BundleDataContext()
            : base("Name=DefaultConnection")
        {
        }

        public BundleDataContext(string connectionString)
            : base(connectionString)
        {
        }

        public BundleDataContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public BundleDataContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public BundleDataContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BundleProductConfiguration());
            modelBuilder.Configurations.Add(new BundleUnifiedVariantConfiguration());
            modelBuilder.Configurations.Add(new BundleVariantReferenceConfiguration());
            modelBuilder.Configurations.Add(new ExclusionConstraintConfiguration());
            modelBuilder.Configurations.Add(new ProductTypeConfiguration());
            modelBuilder.Configurations.Add(new ProductVariantConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BundleProductConfiguration(schema));
            modelBuilder.Configurations.Add(new BundleUnifiedVariantConfiguration(schema));
            modelBuilder.Configurations.Add(new BundleVariantReferenceConfiguration(schema));
            modelBuilder.Configurations.Add(new ExclusionConstraintConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductVariantConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class BundleDataContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<BundleDataContext>
    {
        public BundleDataContext Create()
        {
            return new BundleDataContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeBundleDataContext : IBundleDataContext
    {
        public System.Data.Entity.DbSet<BundleProduct> BundleProducts { get; set; }
        public System.Data.Entity.DbSet<BundleUnifiedVariant> BundleUnifiedVariants { get; set; }
        public System.Data.Entity.DbSet<BundleVariantReference> BundleVariantReferences { get; set; }
        public System.Data.Entity.DbSet<ExclusionConstraint> ExclusionConstraints { get; set; }
        public System.Data.Entity.DbSet<ProductType> ProductTypes { get; set; }
        public System.Data.Entity.DbSet<ProductVariant> ProductVariants { get; set; }

        public FakeBundleDataContext()
        {
            BundleProducts = new FakeDbSet<BundleProduct>("Id");
            BundleUnifiedVariants = new FakeDbSet<BundleUnifiedVariant>("Id");
            BundleVariantReferences = new FakeDbSet<BundleVariantReference>("Id");
            ExclusionConstraints = new FakeDbSet<ExclusionConstraint>("Id");
            ProductTypes = new FakeDbSet<ProductType>("Id");
            ProductVariants = new FakeDbSet<ProductVariant>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // BundleProducts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleProduct
    {
        public int Id { get; set; } // Id (Primary key)
        public string ProductTitle { get; set; } // ProductTitle (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child BundleUnifiedVariants where [BundleUnifiedVariants].[BundleProductId] point to this entity (FK_BundleUnifiedVariants_BundleProducts)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BundleUnifiedVariant> BundleUnifiedVariants { get; set; } // BundleUnifiedVariants.FK_BundleUnifiedVariants_BundleProducts

        public BundleProduct()
        {
            BundleUnifiedVariants = new System.Collections.Generic.List<BundleUnifiedVariant>();
        }
    }

    // BundleUnifiedVariants
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleUnifiedVariant
    {
        public int Id { get; set; } // Id (Primary key)
        public int BundleProductId { get; set; } // BundleProductId
        public string Sku { get; set; } // Sku (length: 200)
        public string VariantTitle { get; set; } // VariantTitle (length: 200)
        public decimal? Price { get; set; } // Price
        public long? ShopifyProductId { get; set; } // ShopifyProductId
        public long? ShopifyVariantId { get; set; } // ShopifyVariantId

        // Reverse navigation

        /// <summary>
        /// Child BundleVariantReferences where [BundleVariantReferences].[BundleUnifiedVariantId] point to this entity (FK_BundleVariantReferences_BundleUnifiedVariants)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BundleVariantReference> BundleVariantReferences { get; set; } // BundleVariantReferences.FK_BundleVariantReferences_BundleUnifiedVariants

        // Foreign keys

        /// <summary>
        /// Parent BundleProduct pointed by [BundleUnifiedVariants].([BundleProductId]) (FK_BundleUnifiedVariants_BundleProducts)
        /// </summary>
        public virtual BundleProduct BundleProduct { get; set; } // FK_BundleUnifiedVariants_BundleProducts

        public BundleUnifiedVariant()
        {
            BundleVariantReferences = new System.Collections.Generic.List<BundleVariantReference>();
        }
    }

    // BundleVariantReferences
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleVariantReference
    {
        public int Id { get; set; } // Id (Primary key)
        public int BundleUnifiedVariantId { get; set; } // BundleUnifiedVariantId
        public int ProductVariantId { get; set; } // ProductVariantId

        // Foreign keys

        /// <summary>
        /// Parent BundleUnifiedVariant pointed by [BundleVariantReferences].([BundleUnifiedVariantId]) (FK_BundleVariantReferences_BundleUnifiedVariants)
        /// </summary>
        public virtual BundleUnifiedVariant BundleUnifiedVariant { get; set; } // FK_BundleVariantReferences_BundleUnifiedVariants

        /// <summary>
        /// Parent ProductVariant pointed by [BundleVariantReferences].([ProductVariantId]) (FK_BundleVariantReferences_ProductVariants)
        /// </summary>
        public virtual ProductVariant ProductVariant { get; set; } // FK_BundleVariantReferences_ProductVariants
    }

    // ExclusionConstraints
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExclusionConstraint
    {
        public int Id { get; set; } // Id (Primary key)
        public int SourceProductVariantId { get; set; } // SourceProductVariantId
        public int TargetProductVariantId { get; set; } // TargetProductVariantId

        // Foreign keys

        /// <summary>
        /// Parent ProductVariant pointed by [ExclusionConstraints].([SourceProductVariantId]) (FK_ExclusionConstraints_ProductVariants)
        /// </summary>
        public virtual ProductVariant SourceProductVariant { get; set; } // FK_ExclusionConstraints_ProductVariants

        /// <summary>
        /// Parent ProductVariant pointed by [ExclusionConstraints].([TargetProductVariantId]) (FK_ExclusionConstraints_ProductVariants1)
        /// </summary>
        public virtual ProductVariant TargetProductVariant { get; set; } // FK_ExclusionConstraints_ProductVariants1
    }

    // ProductTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProductType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Description { get; set; } // Description (length: 50)
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child ProductVariants where [ProductVariants].[ProductTypeId] point to this entity (FK_ProductVariant_ProductType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProductVariant> ProductVariants { get; set; } // ProductVariants.FK_ProductVariant_ProductType

        public ProductType()
        {
            ProductVariants = new System.Collections.Generic.List<ProductVariant>();
        }
    }

    // ProductVariants
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProductVariant
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProductTypeId { get; set; } // ProductTypeId
        public string Name { get; set; } // Name (length: 50)
        public string ShopifyProductHandle { get; set; } // ShopifyProductHandle (length: 100)
        public string ShopifyVariantSku { get; set; } // ShopifyVariantSku (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child BundleVariantReferences where [BundleVariantReferences].[ProductVariantId] point to this entity (FK_BundleVariantReferences_ProductVariants)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BundleVariantReference> BundleVariantReferences { get; set; } // BundleVariantReferences.FK_BundleVariantReferences_ProductVariants
        /// <summary>
        /// Child ExclusionConstraints where [ExclusionConstraints].[SourceProductVariantId] point to this entity (FK_ExclusionConstraints_ProductVariants)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExclusionConstraint> ExclusionConstraints_SourceProductVariantId { get; set; } // ExclusionConstraints.FK_ExclusionConstraints_ProductVariants
        /// <summary>
        /// Child ExclusionConstraints where [ExclusionConstraints].[TargetProductVariantId] point to this entity (FK_ExclusionConstraints_ProductVariants1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExclusionConstraint> ExclusionConstraints_TargetProductVariantId { get; set; } // ExclusionConstraints.FK_ExclusionConstraints_ProductVariants1

        // Foreign keys

        /// <summary>
        /// Parent ProductType pointed by [ProductVariants].([ProductTypeId]) (FK_ProductVariant_ProductType)
        /// </summary>
        public virtual ProductType ProductType { get; set; } // FK_ProductVariant_ProductType

        public ProductVariant()
        {
            ExclusionConstraints_TargetProductVariantId = new System.Collections.Generic.List<ExclusionConstraint>();
            BundleVariantReferences = new System.Collections.Generic.List<BundleVariantReference>();
            ExclusionConstraints_SourceProductVariantId = new System.Collections.Generic.List<ExclusionConstraint>();
        }
    }

    #endregion

    #region POCO Configuration

    // BundleProducts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BundleProduct>
    {
        public BundleProductConfiguration()
            : this("dbo")
        {
        }

        public BundleProductConfiguration(string schema)
        {
            ToTable("BundleProducts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
        }
    }

    // BundleUnifiedVariants
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleUnifiedVariantConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BundleUnifiedVariant>
    {
        public BundleUnifiedVariantConfiguration()
            : this("dbo")
        {
        }

        public BundleUnifiedVariantConfiguration(string schema)
        {
            ToTable("BundleUnifiedVariants", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BundleProductId).HasColumnName(@"BundleProductId").HasColumnType("int").IsRequired();
            Property(x => x.Sku).HasColumnName(@"Sku").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.VariantTitle).HasColumnName(@"VariantTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.ShopifyProductId).HasColumnName(@"ShopifyProductId").HasColumnType("bigint").IsOptional();
            Property(x => x.ShopifyVariantId).HasColumnName(@"ShopifyVariantId").HasColumnType("bigint").IsOptional();

            // Foreign keys
            HasRequired(a => a.BundleProduct).WithMany(b => b.BundleUnifiedVariants).HasForeignKey(c => c.BundleProductId).WillCascadeOnDelete(false); // FK_BundleUnifiedVariants_BundleProducts
        }
    }

    // BundleVariantReferences
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class BundleVariantReferenceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BundleVariantReference>
    {
        public BundleVariantReferenceConfiguration()
            : this("dbo")
        {
        }

        public BundleVariantReferenceConfiguration(string schema)
        {
            ToTable("BundleVariantReferences", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BundleUnifiedVariantId).HasColumnName(@"BundleUnifiedVariantId").HasColumnType("int").IsRequired();
            Property(x => x.ProductVariantId).HasColumnName(@"ProductVariantId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.BundleUnifiedVariant).WithMany(b => b.BundleVariantReferences).HasForeignKey(c => c.BundleUnifiedVariantId).WillCascadeOnDelete(false); // FK_BundleVariantReferences_BundleUnifiedVariants
            HasRequired(a => a.ProductVariant).WithMany(b => b.BundleVariantReferences).HasForeignKey(c => c.ProductVariantId).WillCascadeOnDelete(false); // FK_BundleVariantReferences_ProductVariants
        }
    }

    // ExclusionConstraints
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ExclusionConstraintConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExclusionConstraint>
    {
        public ExclusionConstraintConfiguration()
            : this("dbo")
        {
        }

        public ExclusionConstraintConfiguration(string schema)
        {
            ToTable("ExclusionConstraints", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SourceProductVariantId).HasColumnName(@"SourceProductVariantId").HasColumnType("int").IsRequired();
            Property(x => x.TargetProductVariantId).HasColumnName(@"TargetProductVariantId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.SourceProductVariant).WithMany(b => b.ExclusionConstraints_SourceProductVariantId).HasForeignKey(c => c.SourceProductVariantId).WillCascadeOnDelete(false); // FK_ExclusionConstraints_ProductVariants
            HasRequired(a => a.TargetProductVariant).WithMany(b => b.ExclusionConstraints_TargetProductVariantId).HasForeignKey(c => c.TargetProductVariantId).WillCascadeOnDelete(false); // FK_ExclusionConstraints_ProductVariants1
        }
    }

    // ProductTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProductTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductType>
    {
        public ProductTypeConfiguration()
            : this("dbo")
        {
        }

        public ProductTypeConfiguration(string schema)
        {
            ToTable("ProductTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
        }
    }

    // ProductVariants
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ProductVariantConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductVariant>
    {
        public ProductVariantConfiguration()
            : this("dbo")
        {
        }

        public ProductVariantConfiguration(string schema)
        {
            ToTable("ProductVariants", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductTypeId).HasColumnName(@"ProductTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ShopifyProductHandle).HasColumnName(@"ShopifyProductHandle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.ShopifyVariantSku).HasColumnName(@"ShopifyVariantSku").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.ProductType).WithMany(b => b.ProductVariants).HasForeignKey(c => c.ProductTypeId).WillCascadeOnDelete(false); // FK_ProductVariant_ProductType
        }
    }

    #endregion

}
// </auto-generated>

